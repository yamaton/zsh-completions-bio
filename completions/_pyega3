#compdef pyega3

# Auto-generated with h2o


function _pyega3 {
    local line state

    function _commands {
        local -a commands
        commands=(
            'datasets:List authorized datasets'
            'files:List files in a specified dataset'
            'fetch:Fetch a dataset or file'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[show this help message and exit]' \
        {-d,--debug}'[Extra debugging messages]' \
        {-cf,--config-file}'[JSON file containing credentials/config e.g.{"username":"user1","password":"toor"}]':file:_files \
        {-sf,--server-file}'[JSON file containing server config e.g.{"url_auth":"aai url","url_api":"api url", "url_api_ticket":"htsget url", "client_secret":"client secret"}]':file:_files \
        {-c,--connections}'[Download using specified number of connections (default: 1 connection)]' \
        {-t,--test}'[Test user activated]' \
        {-ms,--max-slice-size}'[Set maximum size for each slice in bytes (default: 100 MB)]' \
        {-j,--json}'[Output data in JSON format instead of tables]' \
        {-v,--version}'[Displays the client'\''s version number. Please note, this aborts any additional actions.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (datasets)
            _pyega3_datasets
            ;;

        (files)
            _pyega3_files
            ;;

        (fetch)
            _pyega3_fetch
            ;;

        esac
        ;;
     esac

}

function _pyega3_datasets {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        "*: :_files"

}

function _pyega3_files {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        "*: :_files"

}

function _pyega3_fetch {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {--reference-name,-r}'[The reference sequence name, for example '\''chr1'\'', '\''1'\'', or '\''chrX'\''. If unspecified, all data is returned.]' \
        {--reference-md5,-m}'[The MD5 checksum uniquely representing the requested reference sequence as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters.]' \
        {--start,-s}'[The start position of the range on the reference, 0-based, inclusive. If specified, reference-name or reference-md5 must also be specified.]' \
        {--end,-e}'[The end position of the range on the reference, 0-based exclusive. If specified, reference-name or reference-md5 must also be specified.]' \
        {--format,-f}'[The format of data to request.]' \
        {--max-retries,-M}'[The maximum number of times to retry a failed transfer. Any negative number means infinite number of retries.]' \
        {--retry-wait,-W}'[The number of seconds to wait before retrying a failed transfer.]' \
        '--output-dir[Output directory. The files will be saved into this directory. Must exist. Default: the current working directory.]':file:_files \
        '--delete-temp-files[Do not keep those temporary, partial files which were left on the disk after a failed transfer.]' \
        "*: :_files"

}

_pyega3 "$@"

