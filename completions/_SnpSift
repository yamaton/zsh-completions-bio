#compdef SnpSift

# Auto-generated with h2o


function _SnpSift {
    local line state

    function _commands {
        local -a commands
        commands=(
            'alleleMat:Create an allele matrix output.'
            'annotate:Annotate '\''ID'\'' from a database (e.g. dbSnp). Assumes entries are sorted.'
            'caseControl:Compare how many variants are in '\''case'\'' and in '\''control'\'' groups; calculate p-values.'
            'ccs:Case control summary. Case and control summaries by region, allele frequency and variant'\''s functional effect.'
            'concordance:Concordance metrics between two VCF files.'
            'covMat:Create an covariance matrix output (allele matrix as input).'
            'dbnsfp:Annotate with multiple entries from dbNSFP.'
            'extractFields:Extract fields from VCF file into tab separated format.'
            'filter:Filter using arbitrary expressions'
            'geneSets:Annotate using MSigDb gene sets (MSigDb includes: GO, KEGG, Reactome, BioCarta, etc.)'
            'gt:Add Genotype to INFO fields and remove genotype fields when possible.'
            'gtfilter:Filter genotype using arbitrary expressions.'
            'gwasCat:Annotate using GWAS catalog'
            'hwe:Calculate Hardy-Weimberg parameters and perform a godness of fit test.'
            'intersect:Intersect intervals (genomic regions).'
            'intervals:Keep variants that intersect with intervals.'
            'intIdx:Keep variants that intersect with intervals. Index-based method: Used for large VCF file and a few intervals to retrieve'
            'join:Join files by genomic region.'
            'op:Annotate using an operator.'
            'phastCons:Annotate using conservation scores (phastCons).'
            'private:Annotate if a variant is private to a family or group.'
            'rmRefGen:Remove reference genotypes.'
            'rmInfo:Remove INFO fields.'
            'sort:Sort VCF file/s (if multiple input VCFs, merge and sort).'
            'split:Split VCF by chromosome.'
            'tstv:Calculate transiton to transversion ratio.'
            'varType:Annotate variant type (SNP,MNP,INS,DEL or MIXED).'
            'vcfCheck:Check that VCF file is well formed.'
            'vcf2tped:Convert VCF to TPED.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '-d[: Debug.]' \
        '-download[: Download database, if not available locally. Default: true.]' \
        '-noDownload[: Do not download a database, if not available locally.]' \
        '-noLog[: Do not report usage statistics to server.]' \
        '-h[: Help.]' \
        '-v[: Verbose.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (alleleMat)
            _SnpSift_alleleMat
            ;;

        (annotate)
            _SnpSift_annotate
            ;;

        (caseControl)
            _SnpSift_caseControl
            ;;

        (ccs)
            _SnpSift_ccs
            ;;

        (concordance)
            _SnpSift_concordance
            ;;

        (covMat)
            _SnpSift_covMat
            ;;

        (dbnsfp)
            _SnpSift_dbnsfp
            ;;

        (extractFields)
            _SnpSift_extractFields
            ;;

        (filter)
            _SnpSift_filter
            ;;

        (geneSets)
            _SnpSift_geneSets
            ;;

        (gt)
            _SnpSift_gt
            ;;

        (gtfilter)
            _SnpSift_gtfilter
            ;;

        (gwasCat)
            _SnpSift_gwasCat
            ;;

        (hwe)
            _SnpSift_hwe
            ;;

        (intersect)
            _SnpSift_intersect
            ;;

        (intervals)
            _SnpSift_intervals
            ;;

        (intIdx)
            _SnpSift_intIdx
            ;;

        (join)
            _SnpSift_join
            ;;

        (op)
            _SnpSift_op
            ;;

        (phastCons)
            _SnpSift_phastCons
            ;;

        (private)
            _SnpSift_private
            ;;

        (rmRefGen)
            _SnpSift_rmRefGen
            ;;

        (rmInfo)
            _SnpSift_rmInfo
            ;;

        (sort)
            _SnpSift_sort
            ;;

        (split)
            _SnpSift_split
            ;;

        (tstv)
            _SnpSift_tstv
            ;;

        (varType)
            _SnpSift_varType
            ;;

        (vcfCheck)
            _SnpSift_vcfCheck
            ;;

        (vcf2tped)
            _SnpSift_vcf2tped
            ;;

        esac
        ;;
     esac

}

function _SnpSift_alleleMat {
    _arguments \
        "*: :_files"

}

function _SnpSift_annotate {
    _arguments \
        '-dbsnp[: Use DbSnp database.]' \
        '-clinvar[: Use ClinVar database.]' \
        '-a[: Annotate fields, even if the database has an empty value (annotates using '\''.'\'' for empty).]' \
        '-exists[: Annotate whether the variant exists or not in the database (using '\''tag'\'' as an INFO field FLAG).]' \
        '-id[: Only annotate ID field. Default: true]' \
        '-info[: Annotate using a list of info fields (list is a comma separated list of fields). Default: ALL.]' \
        '-name[: Prepend '\''str'\'' to all annotated INFO fields. Default: '\'''\''.]' \
        '-maxBlockSize[: Use '\''max block size'\'' when creating index ('\''-sorted'\'' command line option). Default: 16384]' \
        '-noAlt[: Do not use REF and ALT fields when comparing database.vcf entries to file.vcf entries. Default: false]' \
        '-noId[: Do not annotate ID field. Default: false]' \
        '-noInfo[: Do not annotate INFO fields. Default: false]' \
        '-sorted[: VCF database is sorted and uncompressed. Default: false]' \
        '-tabix[: VCF database is tabix-indexed. Default: false]' \
        {-c,-config}'[: Specify config file]':file:_files \
        '-d[: Debug.]' \
        '-db[: Database file name (for commands that require databases).]':file:_files \
        '-download[: Download database, if not available locally. Default: true.]' \
        '-noDownload[: Do not download a database, if not available locally.]' \
        '-noLog[: Do not report usage statistics to server.]' \
        '-h[: Help.]' \
        '-v[: Verbose.]' \
        "*: :_files"

}

function _SnpSift_caseControl {
    _arguments \
        '-chi2[: Use ChiSquare approximarion instead of Fisher exact test.]' \
        '-name[: A name to be added after to '\''Cases'\'' or '\''Controls'\'' tags]' \
        '-tfam[: A TFAM file having case/control informations (phenotype colmun)]':file:_files \
        "*: :_files"

}

function _SnpSift_ccs {
    _arguments \
        '-q[: Be quiet]' \
        '-v[: Be verbose]' \
        "*: :_files"

}

function _SnpSift_concordance {
    _arguments \
        '-s[: Only use sample IDs in file (format: one sample ID per line).]':file:_files \
        "*: :_files"

}

function _SnpSift_covMat {
    _arguments \
        "*: :_files"

}

function _SnpSift_dbnsfp {
    _arguments \
        '-a[: Annotate fields, even if the database has an empty value (annotates using '\''.'\'' for empty).]' \
        '-collapse[: Collapse repeated values from dbNSFP. Default: false]' \
        '-db[: Path to dbNSFP database file (bgzip + tabix).]':file:_files \
        '-g[: Genome version.]' \
        '-noCollapse[: Switch off '\''collapsing'\'' repeated values from dbNSFP. Default: true]' \
        '-m[: Annotate fields even if there are no database matching entries (annotates using '\''.'\'').]' \
        '-n[: Invert '\''fields to add'\'' selection (i.e. use all fields except the ones specified in option '\''-f'\'').]' \
        '-f[: A comma separated list of fields to add.]' \
        {-c,-config}'[: Specify config file]':file:_files \
        '-d[: Debug.]' \
        '-db[: Database file name (for commands that require databases).]':file:_files \
        '-download[: Download database, if not available locally. Default: true.]' \
        '-g[: Genome version (for commands that require databases).]' \
        '-noDownload[: Do not download a database, if not available locally.]' \
        '-noLog[: Do not report usage statistics to server.]' \
        '-h[: Help.]' \
        '-v[: Verbose.]' \
        "*: :_files"

}

function _SnpSift_extractFields {
    _arguments \
        '-s[: Same field separator. Default: '\'' '\'']' \
        '-e[: Empty field. Default: '\'''\'']' \
        "*: :_files"

}

function _SnpSift_filter {
    _arguments \
        {-a,--addFilter}'[: Add a string to FILTER VCF field if '\''expression'\'' is true. Default: '\'''\'' (none)]' \
        {-e,--exprFile}'[: Read expression from a file]':file:_files \
        {-f,--file}'[VCF input file. Default: STDIN]' \
        {-i,--filterId}'[: ID for this filter (##FILTER tag in header and FILTER VCF field). Default: '\''SnpSift'\'']' \
        {-n,--inverse}'[: Inverse. Show lines that do not match filter expression]' \
        {-p,--pass}'[: Use '\''PASS'\'' field instead of filtering out VCF entries]' \
        {-r,--rmFilter}'[: Remove a string from FILTER VCF field if '\''expression'\'' is true (and '\''str'\'' is in the field). Default: '\'''\'' (none)]' \
        {-s,--set}'[: Create a SET using '\''file'\'']':file:_files \
        '--errMissing[: Error is a field is missing. Default: false]' \
        '--format[: SnpEff format version: {2, 3}. Default: Auto]' \
        '--galaxy[: Used from Galaxy (expressions have been sanitized).]' \
        "*: :_files"

}

function _SnpSift_geneSets {
    _arguments \
        "*: :_files"

}

function _SnpSift_gt {
    _arguments \
        '-u[: Uncompress (restore genotype fields).]' \
        "*: :_files"

}

function _SnpSift_gtfilter {
    _arguments \
        '-e[| --exprFile <file>   : Read expression from a file]' \
        '-f[| --file <input.vcf>   : VCF input file. Default: STDIN]' \
        {-gn,--field}'[: Field name to replace if filter is true. Default: '\''GT'\'']' \
        {-gv,--value}'[: Field value to replace if filter is true. Default: '\''.'\'']' \
        '-n[| --inverse   : Inverse. Show lines that do not match filter expression]' \
        '-s[| --set <file>   : Create a SET using '\''file'\'']' \
        '--errMissing[: Error is a field is missing. Default: false]' \
        '--format[: SnpEff format version: {2, 3}. Default: Auto]' \
        "*: :_files"

}

function _SnpSift_gwasCat {
    _arguments \
        {-c,-config}'[: Specify config file]':file:_files \
        '-d[: Debug.]' \
        '-db[: Database file name (for commands that require databases).]':file:_files \
        '-download[: Download database, if not available locally. Default: true.]' \
        '-g[: Genome version (for commands that require databases).]' \
        '-noDownload[: Do not download a database, if not available locally.]' \
        '-noLog[: Do not report usage statistics to server.]' \
        '-h[: Help.]' \
        '-v[: Verbose.]' \
        "*: :_files"

}

function _SnpSift_hwe {
    _arguments \
        '-q[: Be quite]' \
        '-v[: Be verbose]' \
        "*: :_files"

}

function _SnpSift_intersect {
    _arguments \
        '-minOverlap[: Minimum number of bases that two intervals have to overlap. Default : 0]' \
        '-cluster[: An interval has to intersect at least '\''num'\'' intervals (from other files) to be considered. Default: 0]' \
        '-intersect[: Report the intersection of all intervals. Default: false]' \
        '-union[: Report the union of all intervals. Default: true]' \
        '-not[: Only report if it does NOT intersect with any interval in this file (i.e. filter out if intersects)]':file:_files \
        "*: :_files"

}

function _SnpSift_intervals {
    _arguments \
        '-i[VCF file. Default STDIN]':file:_files \
        '-x[:   Exclude VCF entries in intervals]' \
        "*: :_files"

}

function _SnpSift_intIdx {
    _arguments \
        '-if[: Input offset. Default 0 (i.e. zero-based coordinates).]' \
        '-i[: Genomic intervals in command line.]' \
        "*: :_files"

}

function _SnpSift_join {
    _arguments \
        '-if1[: Offset for file1 (e.g. 1 if coordinates are one-based. Default: 1]' \
        '-if2[: Offset for file2 (e.g. 2 if coordinates are one-based. Default: 1]' \
        '-cols1[: Column definition for file 1. Format: chrCol,startCol,endCol (e.g. '\''1,2,3'\''). Shortcuts '\''bed'\'' or '\''vcf'\'' are allowed. Default: '\''vcf'\'']' \
        '-cols2[: Column definition for file 2. Format: chrCol,startCol,endCol (e.g. '\''1,2,3'\''). Shortcuts '\''bed'\'' or '\''vcf'\'' are allowed. Default: '\''vcf'\'']' \
        '-all[: For each interval, show all intersecting. Default: show only one (largest intersection)]' \
        '-closest[: Show closest intervals in file2 if none intersect. Default: off]' \
        '-empty[: Show intervals in file1 even if they do not intersect with any other interval. Default: off]' \
        "*: :_files"

}

function _SnpSift_op {
    _arguments \
        '-fields[: Input VCF field names (comma separated list).]':file:_files \
        '-op[: Operator to be applied to the fields]' \
        '-outfield[: Ouptut field name.]':file:_files \
        "*: :_files"

}

function _SnpSift_phastCons {
    _arguments \
        '-bed[: Input is a BED file.]' \
        '-extract[: Extract sub intervals of at least '\''num'\'' bases, having a conservarion score of at least '\''minScore'\''. Only when input is a BED file.]' \
        '-minScore[Only annotate is score is greater to '\''num'\''. Default: 0.0]' \
        "*: :_files"

}

function _SnpSift_private {
    _arguments \
        "*: :_files"

}

function _SnpSift_rmRefGen {
    _arguments \
        "*: :_files"

}

function _SnpSift_rmInfo {
    _arguments \
        "*: :_files"

}

function _SnpSift_sort {
    _arguments \
        "*: :_files"

}

function _SnpSift_split {
    _arguments \
        '-j[: Join all files in command line (output = STDOUT).]' \
        '-l[: Split by '\''num'\'' lines.]' \
        "*: :_files"

}

function _SnpSift_tstv {
    _arguments \
        "*: :_files"

}

function _SnpSift_varType {
    _arguments \
        "*: :_files"

}

function _SnpSift_vcfCheck {
    _arguments \
        "*: :_files"

}

function _SnpSift_vcf2tped {
    _arguments \
        '-f[: Force. Overwrite new files if they exist. Default: false]' \
        '-num[: Use only numbers {1, 2, 3, 4} instead of bases {A, C, G, T}. Default: false]' \
        '-onlySnp[: Use only SNPs when converting VCF to TPED. Default: false]' \
        '-onlyBiAllelic[Use only bi-allelic variants. Default: false]' \
        '-useMissing[: Use entries with missing genotypes (otherwise they are filtered out). Default: true]' \
        '-useMissingRef[Use entries with missing genotypes marking them as '\''reference'\'' instead of '\''missing'\''. Default: false]' \
        "*: :_files"

}

_SnpSift "$@"

