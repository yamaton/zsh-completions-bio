#compdef _ProcessRepeats ProcessRepeats

# Auto-generated with h2o


function _ProcessRepeats {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,-help}'[Detailed help]' \
        '-species[Post process RepeatMasker results run on sequence from this species. Default is human.]' \
        '-lib[Skips most processing, does not produce a .tbl file unless the custome library is in the ">name#class" format.]':file:_files \
        '-nolow[Does not display simple repeats or low_complexity DNA in the annotation.]' \
        '-noint[Skips steps specific to interspersed repeats, saving lots of time.]' \
        '-lcambig[Outputs ambiguous DNA transposon fragments using a lower case name. All other repeats are listed in upper case. Ambiguous fragments match multiple repeat elements and can only be called based on flanking repeat information.]' \
        '-u[Creates an untouched annotation file besides the manipulated file.]' \
        '-xm[Creates an additional output file in cross_match format (for parsing).]' \
        '-ace[Creates an additional output file in ACeDB format.]' \
        '-gff[Creates an additional Gene Feature Finding format.]' \
        '-poly[Creates an output file listing only potentially polymorphic simple repeats.]' \
        '-no_id[Leaves out final column with unique number for each element (was default).]' \
        '-excln[Calculates repeat densities excluding long stretches of Ns in the query.]' \
        '-orf2[Results in sometimes negative coordinates for L1 elements; all L1 subfamilies are aligned over the ORF2 region, sometimes improving interpretation of data.]' \
        '-a[Shows the alignments in a .align output file.]' \
        '-maskSource[Instructs ProcessRepeats to mask the sequence file using the annotation.]':file:_files \
        '-x[Mask repeats with a lower case '\''x'\''.]' \
        '-xsmall[Mask repeats by making the sequence lowercase.]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

