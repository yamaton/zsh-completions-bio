#compdef motus

# Auto-generated with h2o


function _motus {
    local line state

    function _commands {
        local -a commands
        commands=(
            'downloadDB:Download the mOTUs database'
            'profile:Perform taxonomic profiling (map_tax + calc_mgc + calc_motu) in a single step'
            'merge:Merge several taxonomic profiling results into one table'
            'map_tax:Map reads to the marker gene database'
            'calc_mgc:Calculate marker gene cluster (MGC) abundance'
            'calc_motu:Summarize MGC abundances into a mOTU profile'
            'prep_long:Prepare long reads to be profiled by mOTUs'
            'map_snv:Map reads to the marker gene database for SNV calling'
            'snv_call:Generate SNV profiles (using metaSNV)'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (downloadDB)
            _motus_downloadDB
            ;;

        (profile)
            _motus_profile
            ;;

        (merge)
            _motus_merge
            ;;

        (map_tax)
            _motus_map_tax
            ;;

        (calc_mgc)
            _motus_calc_mgc
            ;;

        (calc_motu)
            _motus_calc_motu
            ;;

        (prep_long)
            _motus_prep_long
            ;;

        (map_snv)
            _motus_map_snv
            ;;

        (snv_call)
            _motus_snv_call
            ;;

        esac
        ;;
     esac

}

function _motus_downloadDB {
    _arguments \
        "*: :_files"

}

function _motus_profile {
    _arguments \
        '-f[input file(s) for reads in forward orientation, fastq(.gz)-formatted]':file:_files \
        '-r[input file(s) for reads in reverse orientation, fastq(.gz)-formatted]':file:_files \
        '-s[input file(s) for unpaired reads, fastq(.gz)-formatted]':file:_files \
        '-n[sample name \['\''unnamed sample'\''\]]' \
        '-i[provide SAM or BAM input file(s) (generated by motus map_tax)]':file:_files \
        '-m[provide a mgc reads count file (generated by motus calc_mgc)]':file:_files \
        '-db[provide a different database directory]':file:_files \
        '-o[output file name \[stdout\]]':file:_files \
        '-I[save the result of BWA in BAM format (output of motus map_tax)]':file:_files \
        '-M[save the mgc reads count (output of motus calc_mgc)]':file:_files \
        '-e[only species with reference genomes (ref-mOTUs)]' \
        '-u[print the full name of the species]' \
        '-c[print result as counts instead of relative abundances]' \
        '-p[print NCBI taxonomy identifiers]' \
        '-B[print result in BIOM format]' \
        '-C[print result in CAMI format (BioBoxes format 0.9.1) Values: \[precision, recall, parenthesis\]]' \
        '-q[print the full rank taxonomy]' \
        '-A[print all taxonomic levels together (kingdom to mOTUs, override -k)]' \
        '-k[taxonomic level \[mOTU\] Values: \[kingdom, phylum, class, order, family, genus, mOTU\]]' \
        '-g[number of marker genes cutoff: 1=higher recall, 6=higher precision \[3\]]' \
        '-l[min length of the alignment (bp) \[75\]]' \
        '-t[number of threads \[1\]]' \
        '-v[verbosity level: 1=error, 2=warning, 3=message, 4+=debugging \[3\]]' \
        '-y[type of read counts \[insert.scaled_counts\] Values: \[base.coverage, insert.raw_counts, insert.scaled_counts\]]' \
        "*: :_files"

}

function _motus_merge {
    _arguments \
        '-i[list of mOTU profiles to merge (comma separated)]':file:_files \
        '-d[merge all files in the directory DIR]':file:_files \
        '-a[add pre-computed profiles from different environmental samples Values: \[all, air, bioreactor, bee, cat, cattle, chicken, dog, fish, freshwater, human, marine, mouse, pig, sheep, soil, termite, wastewater\]]' \
        '-o[output file name \[stdout\]]':file:_files \
        '-B[print result in BIOM format]' \
        '-v[verbosity level: 1=error, 2=warning, 3=message, 4+=debugging \[3\]]' \
        "*: :_files"

}

function _motus_map_tax {
    _arguments \
        '-f[input file(s) for reads in forward orientation, fastq(.gz)-formatted]':file:_files \
        '-r[input file(s) for reads in reverse orientation, fastq(.gz)-formatted]':file:_files \
        '-s[input file(s) for unpaired reads, fastq(.gz)-formatted]':file:_files \
        '-db[provide a different database directory]':file:_files \
        '-o[output file name \[stdout\]]':file:_files \
        '-b[save the result of BWA in BAM format]' \
        '-l[min length of the alignment (bp) \[75\]]' \
        '-t[number of threads \[1\]]' \
        '-v[verbosity level: 1=error, 2=warning, 3=message, 4+=debugging \[3\]]' \
        "*: :_files"

}

function _motus_calc_mgc {
    _arguments \
        '-n[sample name]' \
        '-i[provide a SAM or BAM input file (or list of files) output of motus map_tax]':file:_files \
        '-db[provide a different database directory]':file:_files \
        '-o[output file name \[stdout\]]':file:_files \
        '-l[min length of the alignment (bp) \[75\]]' \
        '-v[verbosity level: 1=error, 2=warning, 3=message, 4+=debugging \[3\]]' \
        '-y[type of read counts \[insert.scaled_counts\] Values: \[base.coverage, insert.raw_counts, insert.scaled_counts\]]' \
        "*: :_files"

}

function _motus_calc_motu {
    _arguments \
        '-n[sample name]' \
        '-i[provide the mgc abundance table (output of motus calc_mgc)]':file:_files \
        '-db[provide a different database directory]':file:_files \
        '-o[output file name \[stdout\]]':file:_files \
        '-e[only species with reference genomes (ref-mOTUs)]' \
        '-B[print result in BIOM format]' \
        '-C[print result in CAMI format (BioBoxes format 0.9.1) Values: \[precision, recall, parenthesis\]]' \
        '-A[print all taxonomic levels together (kingdom to mOTUs, override -k)]' \
        '-c[print result as counts instead of relative abundances]' \
        '-p[print NCBI taxonomy identifiers]' \
        '-u[print the full name of the species]' \
        '-q[print the full rank taxonomy]' \
        '-k[taxonomic level \[mOTU\] Values: \[kingdom, phylum, class, order, family, genus, mOTU\]]' \
        '-g[number of marker genes cutoff: 1=higher recall, 6=higher precision \[3\]]' \
        '-v[verbosity level: 1=error, 2=warning, 3=message, 4+=debugging \[3\]]' \
        "*: :_files"

}

function _motus_prep_long {
    _arguments \
        '-i[long read file to convert, can be fasta(.gz) or fastq(.gz)]':file:_files \
        '-o[converted file (gzipped), ready to be used by motus profile]':file:_files \
        '-no_gz[save the output file without gzipping it]' \
        '-sl[splitting length for the long reads \[300\]]' \
        '-ml[minimum read length, shorter are discarded \[50\]]' \
        '-v[verbosity level: 1=error, 2=warning, 3=message, 4+=debugging \[3\]]' \
        "*: :_files"

}

function _motus_map_snv {
    _arguments \
        '-f[input file(s) for reads in forward orientation, fastq(.gz)-formatted]':file:_files \
        '-r[input file(s) for reads in reverse orientation, fastq(.gz)-formatted]':file:_files \
        '-s[input file(s) for unpaired reads, fastq(.gz)-formatted]':file:_files \
        '-db[provide a different database directory]':file:_files \
        '-o[output BAM file name \[stdout\]]':file:_files \
        '-l[min length of the alignment (bp) \[75\]]' \
        '-t[number of threads \[1\]]' \
        '-v[verbosity level: 1=error, 2=warning, 3=message, 4+=debugging \[3\]]' \
        "*: :_files"

}

function _motus_snv_call {
    _arguments \
        '-d[Call metaSNV on all BAM files in the directory]':file:_files \
        '-db[provide a different database directory]':file:_files \
        '-o[Output directory. Will fail if already exists]':file:_files \
        '-K[Keep all the directories produced by metaSNV. Default is to remove cov, distances, filtered, snpCaller]' \
        '-fb[Sample filter: Coverage breadth, minimal horizontal mOTU coverage percentage per sample \[80.0\]]' \
        '-fd[Sample filter: Coverage depth, minimal average vertical mOTU coverage per sample \[5.0\]]' \
        '-fm[mOTU filter: Minimum number of samples meeting coverage criteria per mOTU \[2\]]' \
        '-fp[Position filter: Required proportion of informative samples (coverage non-zero) per position \[0.90\]]' \
        '-fc[Position filter: Minimum coverage per position per sample per mOTU \[5.0\]]' \
        '-v[verbosity level: 1=error, 2=warning, 3=message, 4+=debugging \[3\]]' \
        "*: :_files"

}

_motus "$@"

