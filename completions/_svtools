#compdef _svtools svtools

# Auto-generated with h2o

    function _svtools_vcftobedpe {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-i,--input}'[VCF input (default: stdin)]' \
            {-o,--output}'[Output BEDPE to write (default: stdout)]' \
            {-ci,--confidence}'[Confidence interval to be added in case absent in the input VCF. If absent and value not provided by user, it adds 1 base]' \
            "*: :_files"

    }

    function _svtools_bedpetovcf {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-b,--bedpe}'[BEDPE input (default: stdin)]' \
            {-o,--output}'[Output VCF to write (default: stdout)]' \
            "*: :_files"

    }

    function _svtools_bedpetobed12 {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-i,--bedpe}'[BEDPE input file]':file:_files \
            {-n,--name}'[The name of the track. Default is '\''BEDPE'\''.]' \
            {-d,--maxdist}'[The minimum distance for drawing intrachromosomal features as if they are interchromosomal (i.e., without a line spanning the two footprints). Default is 1Mb.]' \
            "*: :_files"

    }

    function _svtools_vcfsort {
        _arguments \
            "*: :_files"

    }

    function _svtools_bedpesort {
        _arguments \
            "*: :_files"

    }

    function _svtools_prune {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-d,--distance}'[max separation distance (bp) of adjacent loci in cluster \[50\]]' \
            {-e,--eval_param}'[evaluating parameter for choosing best bedpe in a cluster(e.g. af=AlleleFrequency default:af)]' \
            {-s,--is_sorted}'[specifying if an input file is sorted (default=False)   (use following command to sort: '\''cat FILE | sort -k1,1V -k2,2n -k3,3n -k4,4V -k5,5n -k6,6'\'')]' \
            {-o,--output}'[Output bedpe to write (default: stdout)]' \
            "*: :_files"

    }

    function _svtools_varlookup {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-d,--distance}'[max separation distance (bp) of adjacent loci between bedpe files \[50\]]' \
            {-a,--aFile}'[Pruned merged bedpe (A file) or standard input (-a stdin).]':file:_files \
            {-b,--bFile}'[Pruned merged bedpe (B file) (-b stdin). For prunning use -- ClusterBedpe.py]':file:_files \
            {-c,--cohort}'[Cohort name to add information of matching variants (default:bFile)]' \
            {-o,--output}'[Output BEDPE to write (default: stdout)]' \
            "*: :_files"

    }

    function _svtools_afreq {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            "*: :_files"

    }

    function _svtools_lsort {
        _arguments \
            "*: :_files"

    }

    function _svtools_lmerge {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-i,--inFile}'[A sorted lumpy output file generated by lsort; or stdin (-i stdin). Column 7 must have the format sample:variantID]':file:_files \
            {-p,--percent_slop}'[Increase the the breakpoint confidence interval both up and down stream by a given proportion of the original size. If both slop parameters are set, the max is used.]' \
            {-f,--fixed_slop}'[Increase the the breakpoint confidence interval both up and down stream by a given fixed size. If both slop parameters are set, the max is used.]' \
            '--product[Calculate breakpoint PDF and position using product.]' \
            "*: :_files"

    }

    function _svtools_genotype {
        _arguments \
            "*: :_files"

    }

    function _svtools_copynumber {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-v,--input_vcf}'[VCF input]' \
            {-c,--coordinates}'[BED input]' \
            {-r,--root}'[CNVnator .root histogram file (required)]' \
            {-w,--window}'[CNVnator window size (required)]' \
            {-s,--sample}'[sample to annotate]' \
            '--cnvnator[path to cnvnator-multi binary]' \
            {-o,--output_vcf}'[compressed(.gz) output VCF to write (default: stdout)]' \
            '--debug[debugging verbosity]' \
            "*: :_files"

    }

    function _svtools_vcfpaste {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            {-m,--master}'[VCF file to set first 8 columns of variant info \[first file in vcf_list\]]' \
            "*: :_files"

    }

    function _svtools_classify {
        _arguments \
            "*: :_files"

    }


function _svtools {
    local line state

    function _commands {
        local -a commands
        commands=(
            'vcftobedpe:converts vcf file into bedpe.'
            'bedpetovcf:converts bedpe file to vcf.'
            'bedpetobed12:converts bedpe file to bed12.'
            'vcfsort:sorts a vcf file.'
            'bedpesort:sorts a bedpe file.'
            'prune:cluster a BEDPE file by position based on allele frequency.'
            'varlookup:look for variants common between two bedpe files.'
            'afreq:add allele frequency information to a VCF file.'
            'lsort:sorts a vcf file by type.'
            'lmerge:merges multiple sorted vcf files.'
            'genotype:return a vcf file with genotype information added by svtyper.'
            'copynumber:add cn information using cnvnator.'
            'vcfpaste:combine multiple vcf files produced by genotype command.'
            'classify:classify structural variants'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[print this help menu.]' \
        '--version[what version of svtools are you using?.]' \
        '--contact[feature requests, bugs, mailing lists, etc.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (vcftobedpe)
            _svtools_vcftobedpe
            ;;

        (bedpetovcf)
            _svtools_bedpetovcf
            ;;

        (bedpetobed12)
            _svtools_bedpetobed12
            ;;

        (vcfsort)
            _svtools_vcfsort
            ;;

        (bedpesort)
            _svtools_bedpesort
            ;;

        (prune)
            _svtools_prune
            ;;

        (varlookup)
            _svtools_varlookup
            ;;

        (afreq)
            _svtools_afreq
            ;;

        (lsort)
            _svtools_lsort
            ;;

        (lmerge)
            _svtools_lmerge
            ;;

        (genotype)
            _svtools_genotype
            ;;

        (copynumber)
            _svtools_copynumber
            ;;

        (vcfpaste)
            _svtools_vcfpaste
            ;;

        (classify)
            _svtools_classify
            ;;

        esac
        ;;
     esac

}

