#compdef svtools

# Auto-generated with h2o


function _svtools {
    local line state

    function _commands {
        local -a commands
        commands=(
            'lsort:sort N LUMPY VCF files into a single file'
            'lmerge:merge LUMPY calls inside a single file from svtools lsort'
            'vcfpaste:paste VCFs from multiple samples'
            'copynumber:add copynumber information using cnvnator'
            'genotype:compute genotype of structural variants based on breakpoint depth'
            'afreq:add allele frequency information to a VCF file'
            'bedpetobed12:convert a BEDPE file to BED12 format for viewing in IGV or the UCSC browser'
            'bedpetovcf:convert a BEDPE file to VCF'
            'vcftobedpe:convert a VCF file to a BEDPE file'
            'vcfsort:sort a VCF file'
            'bedpesort:sort a BEDPE file'
            'prune:cluster and prune a BEDPE file by position based on allele frequency'
            'varlookup:look for variants common between two BEDPE files'
            'classify:reclassify DEL and DUP based on read depth information'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[show this help message and exit]' \
        '--version[show program'\''s version number and exit]' \
        '--support[information on obtaining support]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (lsort)
            _svtools_lsort
            ;;

        (lmerge)
            _svtools_lmerge
            ;;

        (vcfpaste)
            _svtools_vcfpaste
            ;;

        (copynumber)
            _svtools_copynumber
            ;;

        (genotype)
            _svtools_genotype
            ;;

        (afreq)
            _svtools_afreq
            ;;

        (bedpetobed12)
            _svtools_bedpetobed12
            ;;

        (bedpetovcf)
            _svtools_bedpetovcf
            ;;

        (vcftobedpe)
            _svtools_vcftobedpe
            ;;

        (vcfsort)
            _svtools_vcfsort
            ;;

        (bedpesort)
            _svtools_bedpesort
            ;;

        (prune)
            _svtools_prune
            ;;

        (varlookup)
            _svtools_varlookup
            ;;

        (classify)
            _svtools_classify
            ;;

        esac
        ;;
     esac

}

function _svtools_lsort {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-f,--vcf-list}'[file containing a line-delimited list of VCF files to combine and sort]':file:_files \
        {-r,--include-reference}'[whether or not to include homozygous reference or missing calls in the output.]' \
        {-t,--tempdir}'[temporary directory]':file:_files \
        {-b,--batchsize}'[number of files to sort in batch]' \
        "*: :_files"

}

function _svtools_lmerge {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-i,--inFile}'[a sorted VCF file generated by svtools lsort. Each INFO field must contain an SNAME tag containing the sample name (e.g. SNAME=SAMPLE_NAME)]':file:_files \
        {-p,--percent-slop}'[increase the the breakpoint confidence interval both up and down stream by a given proportion of the original size]' \
        {-f,--fixed-slop}'[increase the the breakpoint confidence interval both up and down stream by a given fixed size]' \
        '--sum[calculate breakpoint PDF and position using sum algorithm instead of product]' \
        '-g[include original genotypes in output. When multiple variants are merged, the last will dictate the genotype field]' \
        '-w[weighting scheme (intended for use in tiered merging), options: unweighted, carrier_wt, evidence_wt]' \
        {-t,--tempdir}'[Directory for temp file downloads]':file:_files \
        "*: :_files"

}

function _svtools_vcfpaste {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-f,--vcf-list}'[file containing a line-delimited list of VCF files to paste (required)]':file:_files \
        {-m,--master}'[VCF file to set first 8 columns of variant info (otherwise first file in --vcf-list)]' \
        {-t,--tempdir}'[Directory for temp file downloads]':file:_files \
        {-q,--sum-quals}'[sum QUAL scores of input VCFs as output QUAL score]' \
        "*: :_files"

}

function _svtools_copynumber {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-c,--coordinates}'[file containing coordinate for which to retrieve copynumber (required)]':file:_files \
        {-r,--root}'[CNVnator .root histogram file (required)]':file:_files \
        {-w,--window}'[CNVnator window size (required)]' \
        {-s,--sample}'[sample to annotate (required)]' \
        '--cnvnator[path to cnvnator binary for the cnvnator used by speedseq (required)]':file:_files \
        {-i,--input}'[VCF input]' \
        {-o,--output}'[output VCF to write (default: stdout)]':file:_files \
        {-t,--tempdir}'[Directory for temp file downloads]':file:_files \
        "*: :_files"

}

function _svtools_genotype {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-i,--input_vcf}'[VCF input (default: stdin)]' \
        {-o,--output_vcf}'[output VCF to write (default: stdout)]' \
        {-B,--bam}'[BAM or CRAM file]' \
        {-T,--ref_fasta}'[Indexed reference FASTA file (recommended for reading CRAM files)]' \
        {-l,--lib_info}'[create/read JSON file of library information]' \
        {-m,--min_aligned}'[minimum number of aligned bases to consider read as evidence \[20\]]' \
        '-n[number of pairs to sample from BAM file for building insert size distribution \[1000000\]]' \
        {-q,--sum_quals}'[add genotyping quality to existing QUAL (default: overwrite QUAL field)]' \
        '--max_reads[maximum number of reads to assess at any variant (reduces processing time in high-depth regions, default: 10000)]' \
        '--max_ci_dist[maximum size of a confidence interval before 95% CI is used intead (default: 1e10)]' \
        '--split_weight[weight for split reads \[1\]]' \
        '--disc_weight[weight for discordant paired-end reads \[1\]]' \
        {-w,--write_alignment}'[write relevant reads to BAM file]' \
        "*: :_files"

}

function _svtools_afreq {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-t,--tempdir}'[Directory for temp file downloads]':file:_files \
        "*: :_files"

}

function _svtools_bedpetobed12 {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-i,--input}'[BEDPE input file]' \
        {-o,--output}'[Output BED12 to write (default: stdout)]' \
        {-n,--name}'[The name of the track. Default is '\''BEDPE'\'']' \
        {-d,--maxdist}'[The minimum distance for drawing intrachromosomal features as if they are interchromosomal (i.e., without a line spanning the two footprints). Default is 1Mb.]' \
        {-t,--tempdir}'[Directory for temp file downloads]':file:_files \
        "*: :_files"

}

function _svtools_bedpetovcf {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-i,--input}'[BEDPE input (default: stdin)]' \
        {-o,--output}'[Output VCF to write (default: stdout)]' \
        {-t,--tempdir}'[Directory for temp file downloads]':file:_files \
        "*: :_files"

}

function _svtools_vcftobedpe {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-i,--input}'[VCF input (default: stdin)]' \
        {-o,--output}'[output BEDPE to write (default: stdout)]' \
        {-t,--tempdir}'[Directory for temp file downloads]':file:_files \
        "*: :_files"

}

function _svtools_vcfsort {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        "*: :_files"

}

function _svtools_bedpesort {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        "*: :_files"

}

function _svtools_prune {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-d,--distance}'[max separation distance (bp) of adjacent loci in cluster \[50\]]' \
        {-e,--eval-param}'[evaluating parameter for choosing best bedpe in a cluster(e.g. af=AlleleFrequency default:af)]' \
        {-s,--is-sorted}'[specify if an input file is sorted. Sort with svtools bedpesort. (default=False)]' \
        {-o,--output}'[output bedpe to write (default: stdout)]' \
        {-t,--tempdir}'[Directory for temp file downloads]':file:_files \
        "*: :_files"

}

function _svtools_varlookup {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-d,--distance}'[max separation distance (bp) of adjacent loci between bedpe files \[50\]]' \
        {-a,--aFile}'[pruned, merged BEDPE (A file) or standard input (-a stdin).]' \
        {-b,--bFile}'[pruned merged BEDPE (B file) (-b stdin). For pruning use svtools prune]' \
        {-c,--cohort}'[cohort name to add information of matching variants (default:bFile)]' \
        {-o,--output}'[output BEDPE to write (default: stdout)]' \
        "*: :_files"

}

function _svtools_classify {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-i,--input}'[VCF input]' \
        {-o,--output}'[VCF output \[stdout\]]' \
        {-g,--gender}'[tab delimited file of sample genders (male=1, female=2) ex: SAMPLE_A 2]':file:_files \
        {-a,--annotation}'[BED file of annotated elements]' \
        {-f,--fraction}'[fraction of reciprocal overlap to apply annotation to variant \[0.9\]]' \
        {-e,--exclude}'[list of samples to exclude from classification algorithms]':file:_files \
        {-s,--slope_threshold}'[minimum slope absolute value of regression line to classify as DEL or DUP\[1.0\]]' \
        {-r,--rsquared_threshold}'[minimum R^2 correlation value of regression line to classify as DEL or DUP \[0.2\], for large sample reclassification]' \
        {-t,--tSet}'[high quality deletions & duplications training dataset\[vcf\], required by naive Bayes reclassification]' \
        {-m,--method}'[reclassification method, one of (large_sample, naive_bayes, hybrid)]' \
        {-d,--diag_file}'[text file to output method comparisons]' \
        '--sex-chrom[Comma-separated list of sex chromosome names \[chrX,chrY\]]' \
        '--tempdir[Directory for temp file downloads]':file:_files \
        "*: :_files"

}

_svtools "$@"

