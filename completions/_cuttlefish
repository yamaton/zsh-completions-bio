#compdef cuttlefish

# Auto-generated with h2o


function _cuttlefish {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Efficiently construct the compacted de Bruijn graph from sequencing reads or reference sequences'
            'version:Show version'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _cuttlefish_build
            ;;

        (version)
            _cuttlefish_version
            ;;

        esac
        ;;
     esac

}

function _cuttlefish_build {
    _arguments \
        {-s,--seq}'[input files]' \
        {-l,--list}'[input file lists]' \
        {-d,--dir}'[input file directories]' \
        {-k,--kmer-len}'[k-mer length (default: 27)]' \
        {-t,--threads}'[number of threads to use (default: 3)]' \
        {-o,--output}'[output file]' \
        {-w,--work-dir}'[working directory (default: .)]' \
        {-m,--max-memory}'[soft maximum memory limit in GB (default: 3)]' \
        '--unrestrict-memory[do not impose memory usage restriction]' \
        {-h,--help}'[print usage]' \
        {-f,--format}'[output format (0: FASTA, 1: GFA 1.0, 2: GFA 2.0, 3: GFA-reduced)]' \
        '--track-short-seqs[track existence of sequences shorter than k bases]' \
        '--poly-N-stretch[includes information of polyN stretches in the]' \
        '--read[construct a compacted read de Bruijn graph (for FASTQ input)]' \
        '--ref[construct a compacted reference de Bruijn graph (for FASTA input)]' \
        {-c,--cutoff}'[frequency cutoff for (k + 1)-mers (default: refs: 1, reads: 2)]' \
        '--path-cover[extract a maximal path cover of the de Bruijn graph]' \
        '--vertex-set[set of vertices, i.e. k-mers (KMC database) prefix (default: "")]' \
        '--edge-set[set of edges, i.e. (k + 1)-mers (KMC database) prefix (default: "")]' \
        '--save-mph[save the minimal perfect hash (BBHash) over the vertex set]' \
        '--save-buckets[save the DFA-states collection of the vertices]' \
        '--save-vertices[save the vertex set of the graph]' \
        "*: :_files"

}

function _cuttlefish_version {
    _arguments \
        "*: :_files"

}

_cuttlefish "$@"

