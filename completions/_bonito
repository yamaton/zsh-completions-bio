#compdef bonito

# Auto-generated with h2o


function _bonito {
    local line state

    function _commands {
        local -a commands
        commands=(
            'basecaller:basecaller (.fast5 -> .bam).'
            'train:train a bonito model.'
            'evaluate:evaluate a model performance.'
            'view:view a model architecture for a given .toml file and the number of parameters in the network.'
            'convert:convert'
            'download:download pretrained models and training datasets.'
            'export:export'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[show this help message and exit]' \
        {-v,--version}'[show program'\''s version number and exit]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (basecaller)
            _bonito_basecaller
            ;;

        (train)
            _bonito_train
            ;;

        (evaluate)
            _bonito_evaluate
            ;;

        (view)
            _bonito_view
            ;;

        (convert)
            _bonito_convert
            ;;

        (download)
            _bonito_download
            ;;

        (export)
            _bonito_export
            ;;

        esac
        ;;
     esac

}

function _bonito_basecaller {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        '--reference[--modified-bases MODIFIED_BASES \[MODIFIED_BASES ...\]]' \
        '--modified-base-model[--modified-procs MODIFIED_PROCS]' \
        '--modified-device[--read-ids READ_IDS]' \
        '--device[--seed SEED]' \
        '--weights[--skip]' \
        '--no-trim[--save-ctc]' \
        '--revcomp[--recursive]' \
        '--quantize[--no-quantize]' \
        '--overlap[--chunksize CHUNKSIZE]' \
        '--batchsize[--max-reads MAX_READS]' \
        '--min-qscore[--alignment-threads ALIGNMENT_THREADS]' \
        "*: :_files"

}

function _bonito_train {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        '--config[--pretrained PRETRAINED]' \
        '--directory[--device DEVICE]':file:_files \
        '--lr[--seed SEED]' \
        '--epochs[--batch BATCH]' \
        '--chunks[--valid-chunks VALID_CHUNKS]' \
        '--no-amp[-f, --force]' \
        '--restore-optim[--nondeterministic]' \
        '--save-optim-every[--grad-accum-split GRAD_ACCUM_SPLIT]' \
        "*: :_files"

}

function _bonito_evaluate {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        '--directory[--device DEVICE]':file:_files \
        '--seed[--weights WEIGHTS]' \
        '--chunks[--batchsize BATCHSIZE]' \
        '--beamsize[--poa]' \
        "*: :_files"

}

function _bonito_view {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        "*: :_files"

}

function _bonito_convert {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        '--seed[--chunksize CHUNKSIZE]' \
        "*: :_files"

}

function _bonito_download {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        '--all[--models]' \
        '--training[--list, --show]' \
        "*: :_files"

}

function _bonito_export {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {--format,--config}'[config file to read settings from]' \
        '--fuse-bn[fuse batchnorm layers]' \
        "*: :_files"

}

_bonito "$@"

