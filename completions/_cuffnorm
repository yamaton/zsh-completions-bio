#compdef _cuffnorm cuffnorm

# Auto-generated with h2o


function _cuffnorm {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-o,--output-dir}'[write all output files to this directory \[ default: ./ \]]' \
        {-L,--labels}'[comma-separated list of condition labels]' \
        '--norm-standards-file[Housekeeping/spike genes to normalize libraries \[ default: NULL \]]' \
        {-p,--num-threads}'[number of threads used during quantification \[ default: 1 \]]' \
        '--library-type[Library prep used for input reads \[ default: below \]]' \
        '--library-norm-method[Method used to normalize library sizes \[ default: below \]]' \
        '--output-format[Format for output tables \[ default: below \]]' \
        '--compatible-hits-norm[count hits compatible with reference RNAs only \[ default: TRUE \]]' \
        '--total-hits-norm[count all hits for normalization \[ default: FALSE \]]' \
        {-v,--verbose}'[log-friendly verbose processing (no progress bar) \[ default: FALSE \]]' \
        {-q,--quiet}'[log-friendly quiet processing (no progress bar) \[ default: FALSE \]]' \
        '--seed[value of random number generator seed \[ default: 0 \]]' \
        '--no-update-check[do not contact server to check for update availability\[ default: FALSE \]]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

