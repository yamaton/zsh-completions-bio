#compdef _seqkit seqkit

# Auto-generated with h2o

    function _seqkit_amplicon {
        _arguments \
            '--bed[output in BED6+1 format with amplicon as the 7th column]' \
            {-f,--flanking-region}'[region is flanking region]' \
            {-F,--forward}'[forward primer (5'\''-primer-3'\''), degenerate bases allowed]' \
            {-h,--help}'[help for amplicon]' \
            {-I,--immediate-output}'[print output immediately, do not use write buffer]' \
            {-m,--max-mismatch}'[max mismatch when matching primers, no degenerate bases allowed]' \
            {-P,--only-positive-strand}'[only search on positive strand]' \
            {-M,--output-mismatches}'[append the total mismatches and mismatches of 5'\'' end and 3'\'' end]' \
            {-p,--primer-file}'[3- or 2-column tabular primer file, with first column as primer name]' \
            {-r,--region}'[specify region to return. type "seqkit amplicon -h" for detail]' \
            {-R,--reverse}'[reverse primer (5'\''-primer-3'\''), degenerate bases allowed]' \
            {-u,--save-unmatched}'[also save records that do not match any primer]' \
            {-s,--strict-mode}'[strict mode, i.e., discarding seqs not fully matching (shorter) given region range]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_bam {
        _arguments \
            {-B,--bins}'[number of histogram bins (default -1)]' \
            {-N,--bundle}'[partition BAM file into loci (-1) or bundles with this minimum size]' \
            {-c,--count}'[count reads per reference and save to this file]' \
            {-W,--delay}'[sleep this many seconds after plotting (default 1)]' \
            {-y,--dump}'[print histogram data to stderr instead of plotting]' \
            {-G,--exclude-ids}'[exclude records with IDs contained in this file]' \
            {-e,--exec-after}'[execute command after reporting]' \
            {-E,--exec-before}'[execute command before reporting]' \
            {-f,--field}'[target fields]' \
            {-g,--grep-ids}'[only keep records with IDs contained in this file]' \
            {-h,--help}'[help for bam]' \
            {-C,--idx-count}'[fast read per reference counting based on the BAM index]' \
            {-i,--idx-stat}'[fast statistics based on the BAM index]' \
            {-O,--img}'[save histogram to this PDF/image file]' \
            {-H,--list-fields}'[list all available BAM record features]' \
            {-L,--log}'[log10(x+1) transform numeric values]' \
            {-q,--map-qual}'[minimum mapping quality]' \
            {-x,--pass}'[passthrough mode (forward filtered BAM to output)]' \
            {-k,--pretty}'[pretty print certain TSV outputs]' \
            {-F,--prim-only}'[filter out non-primary alignment records]' \
            {-p,--print-freq}'[print/report after this many records (-1 for print after EOF) (default -1)]' \
            {-Q,--quiet-mode}'[supress all plotting to stderr]' \
            {-M,--range-max}'[discard record with field (-f) value greater than this flag (default NaN)]' \
            {-m,--range-min}'[discard record with field (-f) value less than this flag (default NaN)]' \
            {-R,--reset}'[reset histogram after every report]' \
            {-Z,--silent-mode}'[supress TSV output to stderr]' \
            {-s,--stat}'[print BAM satistics of the input files]' \
            {-T,--tool}'[invoke toolbox in YAML format (see documentation)]' \
            {-@,--top-bam}'[save the top -? records to this bam file]' \
            {-?,--top-size}'[size of the top-mode buffer (default 100)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_common {
        _arguments \
            {-n,--by-name}'[match by full name instead of just id]' \
            {-s,--by-seq}'[match by sequence]' \
            {-h,--help}'[help for common]' \
            {-i,--ignore-case}'[ignore case]' \
            {-P,--only-positive-strand}'[only considering positive strand when comparing by sequence]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_concat {
        _arguments \
            {-f,--full}'[keep all sequences, like full/outer join]' \
            {-h,--help}'[help for concat]' \
            {-s,--separator}'[separator for descriptions of records with the same ID (default "|")]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_convert {
        _arguments \
            {-d,--dry-run}'[dry run]' \
            {-f,--force}'[for Illumina-1.8+ -> Sanger, truncate scores > 40 to 40]' \
            '--from[source quality encoding. if not given, we'\''ll guess it]' \
            {-h,--help}'[help for convert]' \
            {-n,--nrecords}'[number of records for guessing quality encoding (default 1000)]' \
            {-N,--thresh-B-in-n-most-common}'[threshold of '\''B'\'' in top N most common quality for guessing Illumina 1.5. (default 2)]' \
            {-F,--thresh-illumina1.5-frac}'[threshold of faction of Illumina 1.5 in the leading N records (default 0.1)]' \
            '--to[target quality encoding (default "Sanger")]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_duplicate {
        _arguments \
            {-h,--help}'[help for duplicate]' \
            {-n,--times}'[duplication number (default 1)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_fa2fq {
        _arguments \
            {-f,--fasta-file}'[FASTA file)]' \
            {-h,--help}'[help for fa2fq]' \
            {-P,--only-positive-strand}'[only search on positive strand]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_faidx {
        _arguments \
            {-f,--full-head}'[print full header line instead of just ID. New fasta index file ending with .seqkit.fai will be created]' \
            {-h,--help}'[help for faidx]' \
            {-i,--ignore-case}'[ignore case]' \
            {-I,--immediate-output}'[print output immediately, do not use write buffer]' \
            {-l,--region-file}'[file containing a list of regions]' \
            {-r,--use-regexp}'[IDs are regular expression. But subseq region is not supported here.]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_fish {
        _arguments \
            {-a,--all}'[search all]' \
            {-p,--aln-params}'[alignment parameters in format "<match>,<mismatch>,<gap_open>,<gap_extend>" (default "4,-4,-2,-1")]' \
            {-h,--help}'[help for fish]' \
            {-i,--invert}'[print out references not matching with any query]' \
            {-q,--min-qual}'[minimum mapping quality (default 5)]' \
            {-b,--out-bam}'[save aligmnets to this BAM file (memory intensive)]' \
            {-x,--pass}'[pass through mode (write input to stdout)]' \
            {-g,--print-aln}'[print sequence alignments]' \
            {-D,--print-desc}'[print full sequence header]' \
            {-f,--query-fastx}'[query fasta]' \
            {-F,--query-sequences}'[query sequences]' \
            {-r,--ranges}'[target ranges, for example: ":10,30:40,-20:"]' \
            {-s,--stranded}'[search + strand only]' \
            {-v,--validate-seq}'[validate bases according to the alphabet]' \
            {-V,--validate-seq-length}'[length of sequence to validate (0 for whole seq) (default 10000)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_fq2fa {
        _arguments \
            {-h,--help}'[help for fq2fa]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_fx2tab {
        _arguments \
            {-a,--alphabet}'[print alphabet letters]' \
            {-q,--avg-qual}'[print average quality of a read]' \
            {-B,--base-content}'[print base content. (case ignored, multiple values supported) e.g. -B AT -B N]' \
            {-C,--base-count}'[print base count. (case ignored, multiple values supported) e.g. -C AT -C N]' \
            {-I,--case-sensitive}'[calculate case sensitive base content/sequence hash]' \
            {-g,--gc}'[print GC content]' \
            {-G,--gc-skew}'[print GC-Skew]' \
            {-H,--header-line}'[print header line]' \
            {-h,--help}'[help for fx2tab]' \
            {-l,--length}'[print sequence length]' \
            {-n,--name}'[only print names (no sequences and qualities)]' \
            {-Q,--no-qual}'[only output two column even for FASTQ file]' \
            {-i,--only-id}'[print ID instead of full head]' \
            {-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            {-s,--seq-hash}'[print hash (MD5) of sequence]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_genautocomplete {
        _arguments \
            '--file[autocompletion file (default "~/.bash_completion.d/seqkit.sh")]' \
            {-h,--help}'[help for genautocomplete]' \
            '--shell[autocompletion type (bash|zsh|fish|powershell) (default "bash")]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_grep {
        _arguments \
            {-n,--by-name}'[match by full name instead of just ID]' \
            {-s,--by-seq}'[search subseq on seq, both positive and negative strand are searched, and mismatch allowed using flag -m/--max-mismatch]' \
            {-c,--circular}'[circular genome]' \
            {-C,--count}'[just print a count of matching records. with the -v/--invert-match flag, count non-matching records]' \
            {-d,--degenerate}'[pattern/motif contains degenerate base]' \
            '--delete-matched[delete a pattern right after being matched, this keeps the firstly matched data and speedups when using regular expressions]' \
            {-h,--help}'[help for grep]' \
            {-i,--ignore-case}'[ignore case]' \
            {-I,--immediate-output}'[print output immediately, do not use write buffer]' \
            {-v,--invert-match}'[invert the sense of matching, to select non-matching records]' \
            {-m,--max-mismatch}'[max mismatch when matching by seq. For large genomes like human genome, using mapping/alignment tools would be faster]' \
            {-P,--only-positive-strand}'[only search on positive strand]' \
            {-p,--pattern}'[search pattern (multiple values supported. Attention: use double quotation marks for patterns containing comma, e.g., -p '\''"A{2,}"'\''))]' \
            {-f,--pattern-file}'[pattern file (one record per line)]' \
            {-R,--region}'[specify sequence region for searching. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases]' \
            {-r,--use-regexp}'[patterns are regular expression]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_head {
        _arguments \
            {-h,--help}'[help for head]' \
            {-n,--number}'[print first N FASTA/Q records (default 10)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_head-genome {
        _arguments \
            {-h,--help}'[help for head-genome]' \
            {-m,--mini-common-words}'[minimal shared prefix words (default 1)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_locate {
        _arguments \
            '--bed[output in BED6 format]' \
            {-c,--circular}'[circular genome. type "seqkit locate -h" for details]' \
            {-d,--degenerate}'[pattern/motif contains degenerate base]' \
            '--gtf[output in GTF format]' \
            {-h,--help}'[help for locate]' \
            {-M,--hide-matched}'[do not show matched sequences]' \
            {-i,--ignore-case}'[ignore case]' \
            {-I,--immediate-output}'[print output immediately, do not use write buffer]' \
            {-m,--max-mismatch}'[max mismatch when matching by seq. For large genomes like human genome, using mapping/alignment tools would be faster]' \
            {-G,--non-greedy}'[non-greedy mode, faster but may miss motifs overlapping with others]' \
            {-P,--only-positive-strand}'[only search on positive strand]' \
            {-p,--pattern}'[pattern/motif (multiple values supported. Attention: use double quotation marks for patterns containing comma, e.g., -p '\''"A{2,}"'\'')]' \
            {-f,--pattern-file}'[pattern/motif file (FASTA format)]' \
            {-F,--use-fmi}'[use FM-index for much faster search of lots of sequence patterns]' \
            {-r,--use-regexp}'[patterns/motifs are regular expression]' \
            {-V,--validate-seq-length}'[length of sequence to validate (0 for whole seq) (default 10000)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_mutate {
        _arguments \
            {-n,--by-name}'[\[match seqs to mutate\] match by full name instead of just id]' \
            {-d,--deletion}'[deletion mutation: deleting subsequence in a range. e.g., -d 1:2 for deleting leading two bases, -d -3:-1 for removing last 3 bases]' \
            {-h,--help}'[help for mutate]' \
            {-I,--ignore-case}'[\[match seqs to mutate\] ignore case of search pattern]' \
            {-i,--insertion}'[insertion mutation: inserting bases behind of given position, e.g., -i 0:ACGT for inserting ACGT at the beginning, -1:* for add * to the end]' \
            {-v,--invert-match}'[\[match seqs to mutate\] invert the sense of matching, to select non-matching records]' \
            {-s,--pattern}'[\[match seqs to mutate\] search pattern (multiple values supported. Attention: use double quotation marks for patterns containing comma, e.g., -p '\''"A{2,}"'\''))]' \
            {-f,--pattern-file}'[\[match seqs to mutate\] pattern file (one record per line)]' \
            {-p,--point}'[point mutation: changing base at given position. e.g., -p 2:C for setting 2nd base as C, -p -1:A for change last base as A]' \
            {-r,--use-regexp}'[\[match seqs to mutate\] search patterns are regular expression]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_pair {
        _arguments \
            {-f,--force}'[overwrite output directory]' \
            {-h,--help}'[help for pair]' \
            {-O,--out-dir}'[output directory]' \
            {-1,--read1}'[(gzipped) read1 file]' \
            {-2,--read2}'[(gzipped) read2 file]' \
            {-u,--save-unpaired}'[save unpaired reads if there are]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_range {
        _arguments \
            {-h,--help}'[help for range]' \
            {-r,--range}'[range. e.g., 1:12 for first 12 records (head -n 12), -12:-1 for last 12 records (tail -n 12)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_rename {
        _arguments \
            {-n,--by-name}'[check duplication by full name instead of just id]' \
            {-f,--force}'[overwrite output directory]' \
            {-h,--help}'[help for rename]' \
            {-m,--multiple-outfiles}'[write results into separated files for multiple input files]' \
            {-O,--out-dir}'[output directory (default "renamed")]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_replace {
        _arguments \
            {-s,--by-seq}'[replace seq (only FASTA)]' \
            {-h,--help}'[help for replace]' \
            {-i,--ignore-case}'[ignore case]' \
            {-K,--keep-key}'[keep the key as value when no value found for the key (only for sequence name)]' \
            {-U,--keep-untouch}'[do not change anything when no value found for the key (only for sequence name)]' \
            {-I,--key-capt-idx}'[capture variable index of key (1-based) (default 1)]' \
            {-m,--key-miss-repl}'[replacement for key with no corresponding value]' \
            {-k,--kv-file}'[tab-delimited key-value file for replacing key with value when using "{kv}" in -r (--replacement) (only for sequence name)]' \
            '--nr-width[minimum width for {nr} in flag -r/--replacement. e.g., formatting "1" to "001" by --nr-width 3 (default 1)]' \
            {-p,--pattern}'[search regular expression]' \
            {-r,--replacement}'[replacement. supporting capture variables. e.g. $1 represents the text of the first submatch. ATTENTION: for *nix OS, use SINGLE quote NOT double quotes or use the \ escape character. Record number is also supported by "{nr}".use ${1} instead of $1 when {kv} given!]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_restart {
        _arguments \
            {-h,--help}'[help for restart]' \
            {-i,--new-start}'[new start position (1-base, supporting negative value counting from the end) (default 1)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_rmdup {
        _arguments \
            {-n,--by-name}'[by full name instead of just id]' \
            {-s,--by-seq}'[by seq]' \
            {-D,--dup-num-file}'[file to save number and list of duplicated seqs]' \
            {-d,--dup-seqs-file}'[file to save duplicated seqs]' \
            {-h,--help}'[help for rmdup]' \
            {-i,--ignore-case}'[ignore case]' \
            {-P,--only-positive-strand}'[only considering positive strand when comparing by sequence]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_sample {
        _arguments \
            {-h,--help}'[help for sample]' \
            {-n,--number}'[sample by number (result may not exactly match), DO NOT use on large FASTQ files.]' \
            {-p,--proportion}'[sample by proportion]' \
            {-s,--rand-seed}'[rand seed (default 11)]' \
            {-2,--two-pass}'[2-pass mode read files twice to lower memory usage. Not allowed when reading from stdin]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_sana {
        _arguments \
            {-A,--allow-gaps}'[allow gap character (-) in sequences]' \
            {-i,--format}'[input and output format: fastq or fasta (default "fastq")]' \
            {-h,--help}'[help for sana]' \
            {-I,--in-format}'[input format: fastq or fasta]' \
            {-O,--out-format}'[output format: fastq or fasta]' \
            {-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_scat {
        _arguments \
            {-A,--allow-gaps}'[allow gap character (-) in sequences]' \
            {-d,--delta}'[minimum size increase in kilobytes to trigger parsing (default 5)]' \
            {-D,--drop-time}'[Notification drop interval (default "500ms")]' \
            {-f,--find-only}'[concatenate existing files and quit]' \
            {-i,--format}'[input and output format: fastq or fasta (fastq) (default "fastq")]' \
            {-g,--gz-only}'[only look for gzipped files (.gz suffix)]' \
            {-h,--help}'[help for scat]' \
            {-I,--in-format}'[input format: fastq or fasta (fastq)]' \
            {-O,--out-format}'[output format: fastq or fasta]' \
            {-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            {-r,--regexp}'[regexp for watched files, by default guessed from the input format]' \
            {-T,--time-limit}'[quit after inactive for this time period]' \
            {-p,--wait-pid}'[after process with this PID exited (default -1)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_seq {
        _arguments \
            {-k,--color}'[colorize sequences - to be piped into "less -R"]' \
            {-p,--complement}'[complement sequence, flag '\''-v'\'' is recommended to switch on]' \
            '--dna2rna[DNA to RNA]' \
            {-G,--gap-letters}'[gap letters (default "- \t.")]' \
            {-h,--help}'[help for seq]' \
            {-l,--lower-case}'[print sequences in lower case]' \
            {-M,--max-len}'[only print sequences shorter than the maximum length (-1 for no limit) (default -1)]' \
            {-R,--max-qual}'[only print sequences with average quality less than this limit (-1 for no limit) (default -1)]' \
            {-m,--min-len}'[only print sequences longer than the minimum length (-1 for no limit) (default -1)]' \
            {-Q,--min-qual}'[only print sequences with average quality qreater or equal than this limit (-1 for no limit) (default -1)]' \
            {-n,--name}'[only print names]' \
            {-i,--only-id}'[print ID instead of full head]' \
            {-q,--qual}'[only print qualities]' \
            {-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            {-g,--remove-gaps}'[remove gaps]' \
            {-r,--reverse}'[reverse sequence]' \
            '--rna2dna[RNA to DNA]' \
            {-s,--seq}'[only print sequences]' \
            {-u,--upper-case}'[print sequences in upper case]' \
            {-v,--validate-seq}'[validate bases according to the alphabet]' \
            {-V,--validate-seq-length}'[length of sequence to validate (0 for whole seq) (default 10000)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_shuffle {
        _arguments \
            {-h,--help}'[help for shuffle]' \
            {-k,--keep-temp}'[keep temporary FASTA and .fai file when using 2-pass mode]' \
            {-s,--rand-seed}'[rand seed for shuffle (default 23)]' \
            {-2,--two-pass}'[two-pass mode read files twice to lower memory usage. (only for FASTA format)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_sliding {
        _arguments \
            {-c,--circular}'[circular genome (same to -C/--circular-genome)]' \
            {-C,--circular-genome}'[circular genome (same to -c/--circular)]' \
            {-g,--greedy}'[greedy mode, i.e., exporting last subsequences even shorter than windows size]' \
            {-h,--help}'[help for sliding]' \
            {-s,--step}'[step size]' \
            {-W,--window}'[window size]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_sort {
        _arguments \
            {-b,--by-bases}'[by non-gap bases]' \
            {-l,--by-length}'[by sequence length]' \
            {-n,--by-name}'[by full name instead of just id]' \
            {-s,--by-seq}'[by sequence]' \
            {-G,--gap-letters}'[gap letters (default "- \t.")]' \
            {-h,--help}'[help for sort]' \
            {-i,--ignore-case}'[ignore case]' \
            {-k,--keep-temp}'[keep temporary FASTA and .fai file when using 2-pass mode]' \
            {-N,--natural-order}'[sort in natural order, when sorting by IDs/full name]' \
            {-r,--reverse}'[reverse the result]' \
            {-L,--seq-prefix-length}'[length of sequence prefix on which seqkit sorts by sequences (0 for whole sequence) (default 10000)]' \
            {-2,--two-pass}'[two-pass mode read files twice to lower memory usage. (only for FASTA format)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_split {
        _arguments \
            {-i,--by-id}'[split squences according to sequence ID]' \
            '--by-id-prefix[file prefix for --by-id]' \
            {-p,--by-part}'[split sequences into N parts]' \
            '--by-part-prefix[file prefix for --by-part]' \
            {-r,--by-region}'[split squences according to subsequence of given region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases. type "seqkit split -h" for more examples]' \
            '--by-region-prefix[file prefix for --by-region]' \
            {-s,--by-size}'[split sequences into multi parts with N sequences]' \
            '--by-size-prefix[file prefix for --by-size]' \
            {-d,--dry-run}'[dry run, just print message and no files will be created.]' \
            {-e,--extension}'[set output file extension, e.g., ".gz", ".xz", or ".zst"]' \
            {-f,--force}'[overwrite output directory]' \
            {-h,--help}'[help for split]' \
            {-k,--keep-temp}'[keep temporary FASTA and .fai file when using 2-pass mode]' \
            {-O,--out-dir}'[output directory (default value is $infile.split)]' \
            {-2,--two-pass}'[two-pass mode read files twice to lower memory usage. (only for FASTA format)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_split2 {
        _arguments \
            {-l,--by-length}'[split sequences into chunks of >=N bases, supports K/M/G suffix]' \
            '--by-length-prefix[file prefix for --by-length]' \
            {-p,--by-part}'[split sequences into N parts]' \
            '--by-part-prefix[file prefix for --by-part]' \
            {-s,--by-size}'[split sequences into multi parts with N sequences]' \
            '--by-size-prefix[file prefix for --by-size]' \
            {-e,--extension}'[set output file extension, e.g., ".gz", ".xz", or ".zst"]' \
            {-f,--force}'[overwrite output directory]' \
            {-h,--help}'[help for split2]' \
            {-O,--out-dir}'[output directory (default value is $infile.split)]' \
            {-1,--read1}'[(gzipped) read1 file]' \
            {-2,--read2}'[(gzipped) read2 file]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_stats {
        _arguments \
            {-a,--all}'[all statistics, including quartiles of seq length, sum_gap, N50]' \
            {-b,--basename}'[only output basename of files]' \
            {-E,--fq-encoding}'[fastq quality encoding. available values: '\''sanger'\'', '\''solexa'\'', '\''illumina-1.3+'\'', '\''illumina-1.5+'\'', '\''illumina-1.8+'\''. (default "sanger")]' \
            {-G,--gap-letters}'[gap letters (default "- .")]' \
            {-h,--help}'[help for stats]' \
            {-e,--skip-err}'[skip error, only show warning message]' \
            {-i,--stdin-label}'[label for replacing default "-" for stdin (default "-")]' \
            {-T,--tabular}'[output in machine-friendly tabular format]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_subseq {
        _arguments \
            '--bed[by tab-delimited BED file]' \
            '--chr[select limited sequence with sequence IDs when using --gtf or --bed (multiple value supported, case ignored)]' \
            {-d,--down-stream}'[down stream length]' \
            '--feature[select limited feature types (multiple value supported, case ignored, only works with GTF)]' \
            '--gtf[by GTF (version 2.2) file]' \
            '--gtf-tag[output this tag as sequence comment (default "gene_id")]' \
            {-h,--help}'[help for subseq]' \
            {-f,--only-flank}'[only return up/down stream sequence]' \
            {-r,--region}'[by region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases, 13:-1 for cutting first 12 bases. type "seqkit subseq -h" for more examples]' \
            {-u,--up-stream}'[up stream length]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_sum {
        _arguments \
            '-[For single-stranded genomes like ssRNA genomes, use -s/--single-strand.]' \
            '-[The message digest would change with different values of k-mer size.]' \
            {-a,--all}'[show all information, including the sequences length and the number of sequences]' \
            {-b,--basename}'[only output basename of files]' \
            {-c,--circular}'[the file contains a single cicular genome sequence]' \
            {-G,--gap-letters}'[gap letters (default "- \t.*")]' \
            {-h,--help}'[help for sum]' \
            {-k,--kmer-size}'[k-mer size for processing circular genomes (default 1000)]' \
            {-g,--remove-gaps}'[remove gaps]' \
            '--rna2dna[convert RNA to DNA]' \
            {-s,--single-strand}'[only consider the positive strand of a circular genome, e.g., ssRNA virus genomes]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_tab2fx {
        _arguments \
            {-b,--buffer-size}'[size of buffer, supported unit: K, M, G. You need increase the value when "bufio.Scanner: token too long" error reported (default "1G")]' \
            {-p,--comment-line-prefix}'[comment line prefix (default \[#,//\])]' \
            {-h,--help}'[help for tab2fx]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_translate {
        _arguments \
            {-x,--allow-unknown-codon}'[translate unknown code to '\''X'\''. And you may not use flag --trim which removes '\''X'\'']' \
            {-F,--append-frame}'[append frame information to sequence ID]' \
            '--clean[change all STOP codon positions from the '\''*'\'' character to '\''X'\'' (an unknown residue)]' \
            {-f,--frame}'[frame(s) to translate, available value: 1, 2, 3, -1, -2, -3, and 6 for all six frames (default \[1\])]' \
            {-h,--help}'[help for translate]' \
            {-M,--init-codon-as-M}'[translate initial codon at beginning to '\''M'\'']' \
            {-l,--list-transl-table}'[show details of translate table N, 0 for all (default -1)]' \
            {-L,--list-transl-table-with-amb-codons}'[show details of translate table N (including ambigugous codons), 0 for all. (default -1)]' \
            {-T,--transl-table}'[translate table/genetic code, type '\''seqkit translate --help'\'' for more details (default 1)]' \
            '--trim[remove all '\''X'\'' and '\''*'\'' characters from the right end of the translation]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_version {
        _arguments \
            {-u,--check-update}'[check update]' \
            {-h,--help}'[help for version]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }

    function _seqkit_watch {
        _arguments \
            {-B,--bins}'[number of histogram bins (default -1)]' \
            {-W,--delay}'[sleep this many seconds after online plotting (default 1)]' \
            {-y,--dump}'[print histogram data to stderr instead of plotting]' \
            {-f,--fields}'[target fields, available values: ReadLen, MeanQual, GC, GCSkew (default "ReadLen")]' \
            {-h,--help}'[help for watch]' \
            {-O,--img}'[save histogram to this PDF/image file]' \
            {-H,--list-fields}'[print out a list of available fields]' \
            {-L,--log}'[log10(x+1) transform numeric values]' \
            {-x,--pass}'[pass through mode (write input to stdout)]' \
            {-p,--print-freq}'[print/report after this many records (-1 for print after EOF) (default -1)]' \
            {-b,--qual-ascii-base}'[ASCII BASE, 33 for Phred+33 (default 33)]' \
            {-Q,--quiet-mode}'[supress all plotting to stderr]' \
            {-R,--reset}'[reset histogram after every report]' \
            {-v,--validate-seq}'[validate bases according to the alphabet]' \
            {-V,--validate-seq-length}'[length of sequence to validate (0 for whole seq) (default 10000)]' \
            '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
            '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
            '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
            '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
            {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
            {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
            '--quiet[be quiet and do not show extra information]' \
            {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
            {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
            "*: :_files"

    }


function _seqkit {
    local line state

    function _commands {
        local -a commands
        commands=(
            'amplicon:extract amplicon (or specific region around it) via primer(s)'
            'bam:monitoring and online histograms of BAM record features'
            'common:find common sequences of multiple files by id/name/sequence'
            'concat:concatenate sequences with the same ID from multiple files'
            'convert:convert FASTQ quality encoding between Sanger, Solexa and Illumina'
            'duplicate:duplicate sequences N times'
            'fa2fq:retrieve corresponding FASTQ records by a FASTA file'
            'faidx:create FASTA index file and extract subsequence'
            'fish:look for short sequences in larger sequences using local alignment'
            'fq2fa:convert FASTQ to FASTA'
            'fx2tab:convert FASTA/Q to tabular format (and length, GC content, average quality...)'
            'genautocomplete:generate shell autocompletion script (bash|zsh|fish|powershell)'
            'grep:search sequences by ID/name/sequence/sequence motifs, mismatch allowed'
            'head:print first N FASTA/Q records'
            'head-genome:print sequences of the first genome with common prefixes in name'
            'locate:locate subsequences/motifs, mismatch allowed'
            'mutate:edit sequence (point mutation, insertion, deletion)'
            'pair:match up paired-end reads from two fastq files'
            'range:print FASTA/Q records in a range (start:end)'
            'rename:rename duplicated IDs'
            'replace:replace name/sequence by regular expression'
            'restart:reset start position for circular genome'
            'rmdup:remove duplicated sequences by ID/name/sequence'
            'sample:sample sequences by number or proportion'
            'sana:sanitize broken single line FASTQ files'
            'scat:real time recursive concatenation and streaming of fastx files'
            'seq:transform sequences (extract ID, filter by length, remove gaps, reverse complement...)'
            'shuffle:shuffle sequences'
            'sliding:extract subsequences in sliding windows'
            'sort:sort sequences by id/name/sequence/length'
            'split:split sequences into files by id/seq region/size/parts (mainly for FASTA)'
            'split2:split sequences into files by size/parts (FASTA, PE/SE FASTQ)'
            'stats:simple statistics of FASTA/Q files'
            'subseq:get subsequences by region/gtf/bed, including flanking sequences'
            'sum:compute message digest for all sequences in FASTA/Q files'
            'tab2fx:convert tabular format to FASTA/Q format'
            'translate:translate DNA/RNA to protein sequence (supporting ambiguous bases)'
            'version:print version information and check for update'
            'watch:monitoring and online histograms of sequence features'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--alphabet-guess-seq-length[length of sequence prefix of the first FASTA record based on which seqkit guesses the sequence type (0 for whole seq) (default 10000)]' \
        {-h,--help}'[help for seqkit]' \
        '--id-ncbi[FASTA head is NCBI-style, e.g. >gi|110645304|ref|NC_002516.2| Pseud...]' \
        '--id-regexp[regular expression for parsing ID (default "^(\\S+)\\s?")]' \
        '--infile-list[file of input files list (one file per line), if given, they are appended to files from cli arguments]' \
        {-w,--line-width}'[line width when outputting FASTA format (0 for no wrap) (default 60)]' \
        {-o,--out-file}'[out file ("-" for stdout, suffix .gz for gzipped out) (default "-")]' \
        '--quiet[be quiet and do not show extra information]' \
        {-t,--seq-type}'[sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default "auto")]' \
        {-j,--threads}'[number of CPUs. can also set with environment variable SEQKIT_THREADS) (default 4)]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (amplicon)
            _seqkit_amplicon
            ;;

        (bam)
            _seqkit_bam
            ;;

        (common)
            _seqkit_common
            ;;

        (concat)
            _seqkit_concat
            ;;

        (convert)
            _seqkit_convert
            ;;

        (duplicate)
            _seqkit_duplicate
            ;;

        (fa2fq)
            _seqkit_fa2fq
            ;;

        (faidx)
            _seqkit_faidx
            ;;

        (fish)
            _seqkit_fish
            ;;

        (fq2fa)
            _seqkit_fq2fa
            ;;

        (fx2tab)
            _seqkit_fx2tab
            ;;

        (genautocomplete)
            _seqkit_genautocomplete
            ;;

        (grep)
            _seqkit_grep
            ;;

        (head)
            _seqkit_head
            ;;

        (head-genome)
            _seqkit_head-genome
            ;;

        (locate)
            _seqkit_locate
            ;;

        (mutate)
            _seqkit_mutate
            ;;

        (pair)
            _seqkit_pair
            ;;

        (range)
            _seqkit_range
            ;;

        (rename)
            _seqkit_rename
            ;;

        (replace)
            _seqkit_replace
            ;;

        (restart)
            _seqkit_restart
            ;;

        (rmdup)
            _seqkit_rmdup
            ;;

        (sample)
            _seqkit_sample
            ;;

        (sana)
            _seqkit_sana
            ;;

        (scat)
            _seqkit_scat
            ;;

        (seq)
            _seqkit_seq
            ;;

        (shuffle)
            _seqkit_shuffle
            ;;

        (sliding)
            _seqkit_sliding
            ;;

        (sort)
            _seqkit_sort
            ;;

        (split)
            _seqkit_split
            ;;

        (split2)
            _seqkit_split2
            ;;

        (stats)
            _seqkit_stats
            ;;

        (subseq)
            _seqkit_subseq
            ;;

        (sum)
            _seqkit_sum
            ;;

        (tab2fx)
            _seqkit_tab2fx
            ;;

        (translate)
            _seqkit_translate
            ;;

        (version)
            _seqkit_version
            ;;

        (watch)
            _seqkit_watch
            ;;

        esac
        ;;
     esac

}

