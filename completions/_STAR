#compdef _STAR STAR

# Auto-generated with h2o


function _STAR {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--versionGenome[earliest genome index version compatible with this STAR release. Please do not change this value!]' \
        '--parametersFiles[name of a user-defined parameters file, "-": none. Can only be defined on the command line. (default: -)]':file:_files \
        '--sysShell[path to the shell binary, preferably bash, e.g. /bin/bash.]':file:_files \
        '--runMode[type of the run. (default: alignReads)]' \
        '--runThreadN[number of threads to run STAR (default: 1)]' \
        '--runDirPerm[permissions for the directories created at the run-time. (default: User_RWX)]' \
        '--runRNGseed[random number generator seed. (default: 777)]' \
        '--genomeDir[path to the directory where genome files are stored (for --runMode alignReads) or will be generated (for --runMode generateGenome) (default: ./GenomeDir/)]':file:_files \
        '--genomeLoad[mode of shared memory usage for the genome files. Only used with --runMode alignReads. (defaullt: NoSharedMemory)]' \
        '--genomeFastaFiles[path(s) to the fasta files with the genome sequences, separated by spaces. These files should be plain text FASTA files, they *cannot* be zipped. Required for the genome generation (--runMode genomeGenerate). Can also be used in the mapping (--runMode alignReads) to add extra (new) sequences to the genome (e.g. spike-ins).]':file:_files \
        '--genomeChainFiles[chain files for genomic liftover. Only used with --runMode liftOver .]':file:_files \
        '--genomeFileSizes[genome files exact sizes in bytes. Typically, this should not be defined by the user. (default: 0)]' \
        '--genomeTransformOutput[which output to transform back to original genome (default: None)]' \
        '--genomeChrBinNbits[where chrBin is the size of the bins for genome storage: each chromosome will occupy an integer number of bins. For a genome with large number of contigs, it is recommended to scale this parameter as min(18, log2\[max(GenomeLength/NumberOfReferences,ReadLength)\]). (default: 18)]' \
        '--genomeSAindexNbases[length (bases) of the SA pre-indexing string. Typically between 10 and 15. Longer strings will use much more memory, but allow faster searches. For small genomes, the parameter --genomeSAindexNbases must be scaled down to min(14, log2(GenomeLength)/2 - 1). (default: 14)]' \
        '--genomeSAsparseD[suffux array sparsity, i.e. distance between indices: use bigger numbers to decrease needed RAM at the cost of mapping speed reduction (default: 1)]' \
        '--genomeSuffixLengthMax[maximum length of the suffixes, has to be longer than read length. -1 = infinite. (default: -1)]' \
        '--genomeTransformType[type of genome transformation (default: None)]' \
        '--genomeTransformVCF[path to VCF file for genome transformation]':file:_files \
        '--sjdbFileChrStartEnd[path to the files with genomic coordinates (chr <tab> start <tab> end <tab> strand) for the splice junction introns. Multiple files can be supplied wand will be concatenated.]':file:_files \
        '--sjdbGTFfile[path to the GTF file with annotations]':file:_files \
        '--sjdbGTFchrPrefix[prefix for chromosome names in a GTF file (e.g. '\''chr'\'' for using ENSMEBL annotations with UCSC genomes)]':file:_files \
        '--sjdbGTFfeatureExon[feature type in GTF file to be used as exons for building transcripts (default: exon)]' \
        '--sjdbGTFtagExonParentTranscript[GTF attribute name for parent transcript ID (default "transcript_id" works for GTF files) (default: transcript_id)]' \
        '--sjdbGTFtagExonParentGene[GTF attribute name for parent gene ID (default "gene_id" works for GTF files) (default: gene_id)]' \
        '--sjdbGTFtagExonParentGeneName[GTF attrbute name for parent gene name (default: gene_name)]' \
        '--sjdbGTFtagExonParentGeneType[GTF attrbute name for parent gene type (default: gene_type gene_biotype)]' \
        '--sjdbOverhang[length of the donor/acceptor sequence on each side of the junctions, ideally = (mate_length - 1) (default: 100)]' \
        '--sjdbScore[extra alignment score for alignments that cross database junctions (default: 2)]' \
        '--sjdbInsertSave[which files to save when sjdb junctions are inserted on the fly at the mapping step (default: Basic)]' \
        '--varVCFfile[path to the VCF file that contains variation data. The 10th column should contain the genotype information, e.g. 0/1]':file:_files \
        '--inputBAMfile[path to BAM input file, to be used with --runMode inputAlignmentsFromBAM]':file:_files \
        '--readFilesType[format of input read files (default: Fastx)]' \
        '--readFilesSAMattrKeep[for --readFilesType SAM SE/PE, which SAM tags to keep in the output BAM, e.g.: --readFilesSAMtagsKeep RG PL (default: All)]' \
        '--readFilesIn[paths to files that contain input read1 (and, if needed, read2) (default: Read1 Read2)]':file:_files \
        '--readFilesManifest[path to the "manifest" file with the names of read files. The manifest file should contain 3 tab-separated columns: paired-end reads: read1_file_name $tab$ read2_file_name $tab$ read_group_line. single-end reads: read1_file_name $tab$ - $tab$ read_group_line. Spaces, but not tabs are allowed in file names. If read_group_line does not start with ID:, it can only contain one ID field, and ID: will be added to it. If read_group_line starts with ID:, it can contain several fields separated by $tab$, and all fields will be be copied verbatim into SAM @RG header line.]':file:_files \
        '--readFilesPrefix[prefix for the read files names, i.e. it will be added in front of the strings in --readFilesIn]' \
        '--readFilesCommand[command line to execute for each of the input file. This command should generate FASTA or FASTQ text and send it to stdout For example: zcat - to uncompress .gz files, bzcat - to uncompress .bz2 files, etc.]' \
        '--readMapNumber[number of reads to map from the beginning of the file. -1: map all reads. (default: -1)]' \
        '--readMatesLengthsIn[Equal/NotEqual - lengths of names,sequences,qualities for both mates are the same / not the same. NotEqual is safe in all situations. (default: NotEqual)]' \
        '--readNameSeparator[character(s) separating the part of the read names that will be trimmed in output (read name after space is always trimmed) (default: /)]' \
        '--readQualityScoreBase[number to be subtracted from the ASCII code to get Phred quality score (default: 33)]' \
        '--clipAdapterType[adapter clipping type (default: Hamming)]' \
        '--clip3pNbases[number(s) of bases to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates. (default: 0)]' \
        '--clip3pAdapterSeq[adapter sequences to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates. polyA ... polyA sequence with the length equal to read length]' \
        '--clip3pAdapterMMp[max proportion of mismatches for 3p adapter clipping for each mate. If one value is given, it will be assumed the same for both mates. (default: 0.1)]' \
        '--clip3pAfterAdapterNbases[number of bases to clip from 3p of each mate after the adapter clipping. If one value is given, it will be assumed the same for both mates. (default: 0)]' \
        '--clip5pNbases[number(s) of bases to clip from 5p of each mate. If one value is given, it will be assumed the same for both mates. (default: 0)]' \
        '--limitGenomeGenerateRAM[maximum available RAM (bytes) for genome generation. (default: 31000000000)]' \
        '--limitIObufferSize[max available buffers size (bytes) for input/output, per thread. (default: 30000000)]' \
        '--limitOutSAMoneReadBytes[max size of the SAM record (bytes) for one read. Recommended value: >(2*(LengthMate1+LengthMate2+100)*outFilterMultimapNmax (default: 100000)]' \
        '--limitOutSJoneRead[max number of junctions for one read (including all multi-mappers) (default: 1000)]' \
        '--limitOutSJcollapsed[max number of collapsed junctions (default: 1000000)]' \
        '--limitBAMsortRAM[maximum available RAM (bytes) for sorting BAM. If =0, it will be set to the genome index size. 0 value can only be used with --genomeLoad NoSharedMemory option. (default: 0)]' \
        '--limitSjdbInsertNsj[maximum number of junction to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run (default: 1000000)]' \
        '--limitNreadsSoft[soft limit on the number of reads (default: -1)]' \
        '--outFileNamePrefix[output files name prefix (including full or relative path). Can only be defined on the command line. (default: ./)]':file:_files \
        '--outTmpDir[path to a directory that will be used as temporary by STAR. All contents of this directory will be removed! The temp directory will default to --outFileNamePrefix_STARtmp]' \
        '--outTmpKeep[whether to keep the temporary files after STAR runs is finished (default: None)]' \
        '--outStd[which output will be directed to stdout (standard out) (default: Log)]' \
        '--outReadsUnmapped[output of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s). (default: None)]' \
        '--outQSconversionAdd[add this number to the quality score (e.g. to convert from Illumina to Sanger, use -31) (default: 0)]' \
        '--outMultimapperOrder[order of multimapping alignments in the output files (default: Old_2.4)]' \
        '--outSAMtype[type of SAM/BAM output. {BAM|SAM|None} for 1st word. {Unsorted|SortedByCoordinate} for 2nd and 3rd. (default: SAM)]' \
        '--outSAMmode[mode of SAM output (default: Full)]' \
        '--outSAMstrandField[Cufflinks-like strand field flag (default: None)]' \
        '--outSAMattributes[a string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order. (default: Standard)]' \
        '--outSAMattrIHstart[start value for the IH attribute. 0 may be required by some downstream software, such as Cufflinks or StringTie. (default: 1)]' \
        '--outSAMunmapped[output of unmapped reads in the SAM format. {None|Within} for 1st word. KeepPairs for 2nd. (default: None)]' \
        '--outSAMorder[type of sorting for the SAM output (default: Paired)]' \
        '--outSAMprimaryFlag[which alignments are considered primary - all others will be marked with 0x100 bit in the FLAG (default: OneBestScore)]' \
        '--outSAMreadID[read ID record type (default: Standard)]' \
        '--outSAMmapqUnique[the MAPQ value for unique mappers (default: 255)]' \
        '--outSAMflagOR[sam FLAG will be bitwise OR'\''d with this value, i.e. FLAG=FLAG | outSAMflagOR. This is applied after all flags have been set by STAR, and after outSAMflagAND. Can be used to set specific bits that are not set otherwise. (default: 0)]' \
        '--outSAMflagAND[sam FLAG will be bitwise AND'\''d with this value, i.e. FLAG=FLAG & outSAMflagOR. This is applied after all flags have been set by STAR, but before outSAMflagOR. Can be used to unset specific bits that are not set otherwise. (default: 65535)]' \
        '--outSAMattrRGline[SAM/BAM read group line. The first word contains the read group identifier and must start with "ID:", e.g. --outSAMattrRGline ID:xxx CN:yy "DS:z z z". xxx will be added as RG tag to each output alignment. Any spaces in the tag values have to be double quoted. Comma separated RG lines correspons to different (comma separated) input files in --readFilesIn. Commas have to be surrounded by spaces, e.g. --outSAMattrRGline ID:xxx , ID:zzz "DS:z z" , ID:yyy DS:yyyy]' \
        '--outSAMheaderHD[@HD (header) line of the SAM header]' \
        '--outSAMheaderPG[extra @PG (software) line of the SAM header (in addition to STAR)]' \
        '--outSAMheaderCommentFile[path to the file with @CO (comment) lines of the SAM header]':file:_files \
        '--outSAMfilter[filter the output into main SAM/BAM files (default: None)]' \
        '--outSAMmultNmax[max number of multiple alignments for a read that will be output to the SAM/BAM files. Note that if this value is not equal to -1, the top scoring alignment will be output first (default: -1) -1 ... all alignments (up to --outFilterMultimapNmax) will be output]' \
        '--outSAMtlen[calculation method for the TLEN field in the SAM/BAM files (default: 1)]' \
        '--outBAMcompression[BAM compression level from -1 to 10, -1=default compression (6?), 0=no compression, 10=maximum compression (default: 1)]' \
        '--outBAMsortingThreadN[number of threads for BAM sorting. 0 will default to min(6,--runThreadN). (default: 0)]' \
        '--outBAMsortingBinsN[number of genome bins fo coordinate-sorting (default: 50)]' \
        '--bamRemoveDuplicatesType[mark duplicates in the BAM file, for now only works with (i) sorted BAM fed with inputBAMfile, and (ii) for paired-end alignments only]' \
        '--bamRemoveDuplicatesMate2basesN[number of bases from the 5'\'' of mate 2 to use in collapsing (e.g. for RAMPAGE) (default: 0)]' \
        '--outWigType[type of signal output, e.g. "bedGraph" OR "bedGraph read1_5p". Requires sorted BAM: --outSAMtype BAM SortedByCoordinate. (default: None)]' \
        '--outWigStrand[strandedness of wiggle/bedGraph output (default: Stranded)]' \
        '--outWigReferencesPrefix[prefix matching reference names to include in the output wiggle file, e.g. "chr", default "-" - include all references]' \
        '--outWigNorm[type of normalization for the signal (default: RPM)]' \
        '--outFilterType[type of filtering (default: Normal)]' \
        '--outFilterMultimapScoreRange[the score range below the maximum score for multimapping alignments (default: 1)]' \
        '--outFilterMultimapNmax[maximum number of loci the read is allowed to map to. Alignments (all of them) will be output only if the read maps to no more loci than this value.]' \
        '--outFilterMismatchNmax[alignment will be output only if it has no more mismatches than this value. (default: 10)]' \
        '--outFilterMismatchNoverLmax[alignment will be output only if its ratio of mismatches to *mapped* length is less than or equal to this value. (default: 0.3)]' \
        '--outFilterMismatchNoverReadLmax[alignment will be output only if its ratio of mismatches to *read* length is less than or equal to this value. (default: 1.0)]' \
        '--outFilterScoreMin[alignment will be output only if its score is higher than or equal to this value. (default: 0)]' \
        '--outFilterScoreMinOverLread[same as outFilterScoreMin, but normalized to read length (sum of mates'\'' lengths for paired-end reads) (default: 0.66)]' \
        '--outFilterMatchNmin[alignment will be output only if the number of matched bases is higher than or equal to this value. (default: 0)]' \
        '--outFilterMatchNminOverLread[sam as outFilterMatchNmin, but normalized to the read length (sum of mates'\'' lengths for paired-end reads). (default: 0.66)]' \
        '--outFilterIntronMotifs[filter alignment using their motifs (default: None)]' \
        '--outFilterIntronStrands[filter alignments (default: RemoveInconsistentStrands)]' \
        '--outSJtype[type of splice junction output (default: Standard)]' \
        '--outSJfilterReads[which reads to consider for collapsed splice junctions output (default: All)]' \
        '--outSJfilterOverhangMin[4 integers: minimum overhang length for splice junctions on both sides for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif (default: 30 12 12 12) does not apply to annotated junctions]' \
        '--outSJfilterCountUniqueMin[4 integers: minimum uniquely mapping read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif (default: 3 1 1 1) Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions]' \
        '--outSJfilterCountTotalMin[4 integers: minimum total (multi-mapping+unique) read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif (default: 3 1 1 1) Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions]' \
        '--outSJfilterDistToOtherSJmin[4 integers>=0: minimum allowed distance to other junctions'\'' donor/acceptor (default: 10 0 5 10)]' \
        '--outSJfilterIntronMaxVsReadN[maximum gap allowed for junctions supported by 1,2,3,,,N reads (default: 50000 100000 200000)]' \
        '--scoreGap[splice junction penalty (independent on intron motif) (default: 0)]' \
        '--scoreGapNoncan[non-canonical junction penalty (in addition to scoreGap) (default: -8)]' \
        '--scoreGapGCAG[GC/AG and CT/GC junction penalty (in addition to scoreGap) (default: -4)]' \
        '--scoreGapATAC[AT/AC and GT/AT junction penalty (in addition to scoreGap) (default: -8)]' \
        '--scoreGenomicLengthLog2scale[extra score logarithmically scaled with genomic length of the alignment: scoreGenomicLengthLog2scale*log2(genomicLength) (default: -0.25)]' \
        '--scoreDelOpen[deletion open penalty (default: -2)]' \
        '--scoreDelBase[deletion extension penalty per base (in addition to scoreDelOpen) (default: -2)]' \
        '--scoreInsOpen[insertion open penalty (default: -2)]' \
        '--scoreInsBase[insertion extension penalty per base (in addition to scoreInsOpen) (default: -2)]' \
        '--scoreStitchSJshift[maximum score reduction while searching for SJ boundaries in the stitching step (default: 1)]' \
        '--seedSearchStartLmax[defines the search start point through the read - the read is split into pieces no longer than this value (default: 50)]' \
        '--seedSearchStartLmaxOverLread[seedSearchStartLmax normalized to read length (sum of mates'\'' lengths for paired-end reads) (default: 1.0)]' \
        '--seedSearchLmax[defines the maximum length of the seeds, if =0 seed length is not limited (default: 0)]' \
        '--seedMultimapNmax[only pieces that map fewer than this value are utilized in the stitching procedure (default: 10000)]' \
        '--seedPerReadNmax[max number of seeds per read (default: 1000)]' \
        '--seedPerWindowNmax[max number of seeds per window (default: 50)]' \
        '--seedNoneLociPerWindow[max number of one seed loci per window (default: 10)]' \
        '--seedSplitMin[min length of the seed sequences split by Ns or mate gap (default: 12)]' \
        '--seedMapMin[min length of seeds to be mapped (default: 5)]' \
        '--alignIntronMin[minimum intron size: genomic gap is considered intron if its length>=alignIntronMin, otherwise it is considered Deletion (default: 21)]' \
        '--alignIntronMax[maximum intron size, if 0, max intron size will be determined by (2^winBinNbits)*winAnchorDistNbins (default: 0)]' \
        '--alignMatesGapMax[maximum gap between two mates, if 0, max intron gap will be determined by (2^winBinNbits)*winAnchorDistNbins (default: 0)]' \
        '--alignSJoverhangMin[minimum overhang (i.e. block size) for spliced alignments (default: 5)]' \
        '--alignSJstitchMismatchNmax[4*int>=0: maximum number of mismatches for stitching of the splice junctions (-1: no limit). (default: 0 -1 0 0) (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif.]' \
        '--alignSJDBoverhangMin[minimum overhang (i.e. block size) for annotated (sjdb) spliced alignments (default: 3)]' \
        '--alignSplicedMateMapLmin[minimum mapped length for a read mate that is spliced (default: 0)]' \
        '--alignSplicedMateMapLminOverLmate[alignSplicedMateMapLmin normalized to mate length (default: 0.66)]' \
        '--alignWindowsPerReadNmax[max number of windows per read (default: 10000)]' \
        '--alignTranscriptsPerWindowNmax[max number of transcripts per window (default: 100)]' \
        '--alignTranscriptsPerReadNmax[max number of different alignments per read to consider (default: 10000)]' \
        '--alignEndsType[string: type of read ends alignment (default: Local)]' \
        '--alignEndsProtrude[allow protrusion of alignment ends, i.e. start (end) of the +strand mate downstream of the start (end) of the -strand mate (default: 0 ConcordantPair) 1st word: int: maximum number of protrusion bases allowed. 2nd word: string: {ConcordantPair|DiscordantPair}.]' \
        '--alignSoftClipAtReferenceEnds[allow the soft-clipping of the alignments past the end of the chromosomes. (default: Yes)]' \
        '--alignInsertionFlush[how to flush ambiguous insertion positions (default: None)]' \
        '--peOverlapNbasesMin[minimum number of overlap bases to trigger mates merging and realignment (default: 0)]' \
        '--peOverlapMMp[maximum proportion of mismatched bases in the overlap area (default: 0.01)]' \
        '--winAnchorMultimapNmax[max number of loci anchors are allowed to map to (default: 50)]' \
        '--winBinNbits[log2(winBin), where winBin is the size of the bin for the windows/clustering, each window will occupy an integer number of bins. (default: 16)]' \
        '--winAnchorDistNbins[max number of bins between two anchors that allows aggregation of anchors into one window (default: 9)]' \
        '--winFlankNbins[log2(winFlank), where win Flank is the size of the left and right flanking regions for each window (default: 4)]' \
        '--winReadCoverageRelativeMin[minimum relative coverage of the read sequence by the seeds in a window, for STARlong algorithm only. (default: 0.5)]' \
        '--winReadCoverageBasesMin[minimum number of bases covered by the seeds in a window , for STARlong algorithm only. (default: 0)]' \
        '--chimOutType[type of chimeric output (default: Junctions)]' \
        '--chimSegmentMin[minimum length of chimeric segment length, if ==0, no chimeric output (default: 0)]' \
        '--chimScoreMin[minimum total (summed) score of the chimeric segments (default: 0)]' \
        '--chimScoreDropMax[max drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length (default: 20)]' \
        '--chimScoreSeparation[minimum difference (separation) between the best chimeric score and the next one (default: 10)]' \
        '--chimScoreJunctionNonGTAG[penalty for a non-GT/AG chimeric junction (default: -1)]' \
        '--chimJunctionOverhangMin[minimum overhang for a chimeric junction (default: 20)]' \
        '--chimSegmentReadGapMax[maximum gap in the read sequence between chimeric segments (default: 0)]' \
        '--chimFilter[different filters for chimeric alignments (default: banGenomicN)]' \
        '--chimMainSegmentMultNmax[maximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments. (default: 10)]' \
        '--chimMultimapNmax[maximum number of chimeric multi-alignments (default: 0) 0 ... use the old scheme for chimeric detection which only considered unique alignments]' \
        '--chimMultimapScoreRange[the score range for multi-mapping chimeras below the best chimeric score. Only works with --chimMultimapNmax > 1 (default: 1)]' \
        '--chimNonchimScoreDropMin[to trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value (default: 20)]' \
        '--chimOutJunctionFormat[formatting type for the Chimeric.out.junction file (default: 0)]' \
        '--quantMode[types of quantification requested]' \
        '--quantTranscriptomeBAMcompression[transcriptome BAM compression level (default: 1)]' \
        '--quantTranscriptomeBan[prohibit various alignment type (default: IndelSoftclipSingleend)]' \
        '--twopassMode[string: 2-pass mapping mode. (default: None)]' \
        '--twopass1readsN[number of reads to process for the 1st step. Use very large number (or default -1) to map all reads in the first step. (default: -1)]' \
        '--waspOutputMode[WASP allele-specific output type. (default: None) This is re-implementation of the original WASP mappability filtering by Bryce van de Geijn, Graham McVicker, Yoav Gilad & Jonathan K Pritchard. Please cite the original WASP paper: Nature Methods 12, 1061–1063 (2015), https://www.nature.com/articles/nmeth.3582 .]' \
        '--soloType[type of single-cell RNA-seq (default: None)]' \
        '--soloCBwhitelist[file(s) with whitelist(s) of cell barcodes. Only --soloType CB_UMI_Complex allows more than one whitelist file. (default: None)]':file:_files \
        '--soloCBstart[cell barcode start base (default: 1)]' \
        '--soloCBlen[cell barcode length (default: 16)]' \
        '--soloUMIstart[UMI start base (default: 17)]' \
        '--soloUMIlen[UMI length (default: 10)]' \
        '--soloBarcodeReadLength[length of the barcode read (default: 1)]' \
        '--soloBarcodeMate[identifies which read mate contains the barcode (CB+UMI) sequence (default: 0)]' \
        '--soloCBposition[position of Cell Barcode(s) on the barcode read.]' \
        '--soloUMIposition[position of the UMI on the barcode read, same as soloCBposition. Example: inDrop (Zilionis et al, Nat. Protocols, 2017): --soloCBposition 3_9_3_14]' \
        '--soloAdapterSequence[adapter sequence to anchor barcodes.]' \
        '--soloAdapterMismatchesNmax[maximum number of mismatches allowed in adapter sequence. (default: 1)]' \
        '--soloCBmatchWLtype[matching the Cell Barcodes to the WhiteList (default: 1MM_multi)]' \
        '--soloInputSAMattrBarcodeSeq[when inputting reads from a SAM file (--readsFileType SAM SE/PE), these SAM attributes mark the barcode sequence (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use --soloInputSAMattrBarcodeSeq CR UR . This parameter is required when running STARsolo with input from SAM.]' \
        '--soloInputSAMattrBarcodeQual[when inputting reads from a SAM file (--readsFileType SAM SE/PE), these SAM attributes mark the barcode qualities (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use --soloInputSAMattrBarcodeQual CY UY . If this parameter is '\''-'\'' (default), the quality '\''H'\'' will be assigned to all bases.]' \
        '--soloStrand[strandedness of the solo libraries (default: Forward)]' \
        '--soloFeatures[genomic features for which the UMI counts per Cell Barcode are collected (default: Gene)]' \
        '--soloMultiMappers[counting method for reads mapping to multiple genes (default: Unique)]' \
        '--soloUMIdedup[type of UMI deduplication (collapsing) algorithm (default: 1MM_All)]' \
        '--soloUMIfiltering[type of UMI filtering (for reads uniquely mapping to genes) (default: -)]' \
        '--soloOutFileNames[file names for STARsolo output. (default: Solo.out/ features.tsv barcodes.tsv matrix.mtx) file_name_prefix gene_names barcode_sequences cell_feature_count_matrix]' \
        '--soloCellFilter[cell filtering type and parameters (default: CellRanger2.2 3000 0.99 10)]' \
        '--soloOutFormatFeaturesGeneField3[field 3 in the Gene features.tsv file. If "-", then no 3rd field is output. (default: "Gene Expression")]' \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

