#compdef csvsql

# Auto-generated with h2o

function _csvsql {
    _arguments \
        {-h,--help}'[show this help message and exit]' \
        {-d,--delimiter}'[Delimiting character of the input CSV file.]' \
        {-t,--tabs}'[Specify that the input CSV file is delimited with tabs. Overrides "-d".]' \
        {-q,--quotechar}'[Character used to quote strings in the input CSV file.]' \
        {-u,--quoting}'[Quoting style used in the input CSV file. 0 = Quote Minimal, 1 = Quote All, 2 = Quote Non-numeric, 3 = Quote None.]' \
        {-b,--no-doublequote}'[Whether or not double quotes are doubled in the input CSV file.]' \
        {-p,--escapechar}'[Character used to escape the delimiter if --quoting 3 ("Quote None") is specified and to escape the QUOTECHAR if --no-doublequote is specified.]' \
        {-z,--maxfieldsize}'[Maximum length of a single field in the input CSV file.]' \
        {-e,--encoding}'[Specify the encoding of the input CSV file.]' \
        {-L,--locale}'[Specify the locale (en_US) of any formatted numbers.]' \
        {-S,--skipinitialspace}'[Ignore whitespace immediately following the delimiter.]' \
        '--blanks[Do not convert "", "na", "n/a", "none", "null", "." to NULL.]' \
        '--date-format[Specify a strptime date format string like "%m/%d/%Y".]' \
        '--datetime-format[Specify a strptime datetime format string like "%m/%d/%Y %I:%M %p".]' \
        {-H,--no-header-row}'[Specify that the input CSV file has no header row. Will create default headers (a,b,c,...).]' \
        {-K,--skip-lines}'[Specify the number of initial lines to skip before the header row (e.g. comments, copyright notices, empty rows).]' \
        {-v,--verbose}'[Print detailed tracebacks when errors occur.]' \
        {-l,--linenumbers}'[Insert a column of line numbers at the front of the output. Useful when piping to grep or as a simple primary key.]' \
        '--zero[When interpreting or displaying column numbers, use zero-based numbering instead of the default 1-based numbering.]' \
        {-V,--version}'[Display version information and exit.]' \
        {-i,--dialect}'[Dialect of SQL to generate. Cannot be used with --db.]' \
        '--db[If present, a SQLAlchemy connection string to use to directly execute generated SQL on a database.]' \
        '--query[Execute one or more SQL queries delimited by ";" and output the result of the last query as CSV. QUERY may be a filename.]' \
        '--insert[Insert the data into the table. Requires --db.]' \
        '--prefix[Add an expression following the INSERT keyword, like OR IGNORE or OR REPLACE.]' \
        '--before-insert[Execute SQL before the INSERT command. Requires --insert.]' \
        '--after-insert[Execute SQL after the INSERT command. Requires --insert.]' \
        '--tables[A comma-separated list of names of tables to be created. By default, the tables will be named after the filenames without extensions or "stdin".]' \
        '--no-constraints[Generate a schema without length limits or null checks. Useful when sampling big tables.]' \
        '--unique-constraint[A column-separated list of names of columns to include in a UNIQUE constraint.]' \
        '--no-create[Skip creating the table. Requires --insert.]' \
        '--create-if-not-exists[Create the table if it does not exist, otherwise keep going. Requires --insert.]' \
        '--overwrite[Drop the table if it already exists. Requires --insert. Cannot be used with --no-create.]' \
        '--db-schema[Optional name of database schema to create table(s) in.]' \
        {-y,--snifflimit}'[Limit CSV dialect sniffing to the specified number of bytes. Specify "0" to disable sniffing entirely, or "-1" to sniff the entire file.]' \
        {-I,--no-inference}'[Disable type inference when parsing the input.]' \
        '--chunk-size[Chunk size for batch insert into the table. Requires --insert.]' \
        "*: :_files"

}

_csvsql "$@"

