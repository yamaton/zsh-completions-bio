#compdef _NanoPlot NanoPlot

# Auto-generated with h2o


function _NanoPlot {
    local line state

    function _commands {
        local -a commands
        commands=(
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[show the help and exit]' \
        {-v,--version}'[Print version and exit.]' \
        {-t,--threads}'[Set the allowed number of threads to be used by the script]' \
        '--verbose[Write log messages also to terminal.]' \
        '--store[Store the extracted data in a pickle file for future plotting.]' \
        '--raw[Store the extracted data in tab separated file.]' \
        '--huge[Input data is one very large file.]' \
        {-o,--outdir}'[Specify directory in which output has to be created.]':file:_files \
        '--no_static[Do not make static (png) plots.]' \
        {-p,--prefix}'[Specify an optional prefix to be used for the output files.]' \
        '--tsv_stats[Output the stats file as a properly formatted TSV.]' \
        '--info_in_report[Add NanoPlot run info in the report.]' \
        '--maxlength[Hide reads longer than length specified.]' \
        '--minlength[Hide reads shorter than length specified.]' \
        '--drop_outliers[Drop outlier reads with extreme long length.]' \
        '--downsample[Reduce dataset to N reads by random sampling.]' \
        '--loglength[Additionally show logarithmic scaling of lengths in plots.]' \
        '--percentqual[Use qualities as theoretical percent identities.]' \
        '--alength[Use aligned read lengths rather than sequenced length (bam mode)]' \
        '--minqual[Drop reads with an average quality lower than specified.]' \
        '--runtime_until[Only take the N first hours of a run]' \
        '--readtype[Which read type to extract information about from summary. Options are 1D, 2D, 1D2]' \
        '--barcoded[Use if you want to split the summary file by barcode]' \
        '--no_supplementary[Use if you want to remove supplementary alignments]' \
        {-c,--color}'[Specify a valid matplotlib color for the plots]' \
        {-cm,--colormap}'[Specify a valid matplotlib colormap for the heatmap]' \
        {-f,--format}'[Specify the output format of the plots, which are in addition to the html files]' \
        '--plots[Specify which bivariate plots have to be made.]' \
        '--legacy[Specify which bivariate plots have to be made (legacy mode).]' \
        '--listcolors[List the colors which are available for plotting and exit.]' \
        '--listcolormaps[List the colors which are available for plotting and exit.]' \
        '--no-N50[Hide the N50 mark in the read length histogram]' \
        '--N50[Show the N50 mark in the read length histogram]' \
        '--title[Add a title to all plots, requires quoting if using spaces]' \
        '--font_scale[Scale the font of the plots by a factor]' \
        '--dpi[Set the dpi for saving images]' \
        '--hide_stats[Not adding Pearson R stats in some bivariate plots]' \
        '--fastq[Data is in one or more default fastq file(s).]':file:_files \
        '--fasta[Data is in one or more fasta file(s).]':file:_files \
        '--fastq_rich[Data is in one or more fastq file(s) generated by albacore, MinKNOW or guppy with additional information concerning channel and time.]':file:_files \
        '--fastq_minimal[Data is in one or more fastq file(s) generated by albacore, MinKNOW or guppy with additional information concerning channel and time. Is extracted swiftly without elaborate checks.]':file:_files \
        '--summary[Data is in one or more summary file(s) generated by albacore or guppy.]':file:_files \
        '--bam[Data is in one or more sorted bam file(s).]':file:_files \
        '--ubam[Data is in one or more unmapped bam file(s).]':file:_files \
        '--cram[Data is in one or more sorted cram file(s).]':file:_files \
        '--pickle[Data is a pickle file stored earlier.]' \
        '--feather[Data is in one or more feather file(s).]':file:_files \
        '*: :_files'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        esac
        ;;
     esac

}

