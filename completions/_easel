#compdef _easel easel

# Auto-generated with h2o

    function _easel_alistat {
        _arguments \
            '-h[show brief help on version and usage]' \
            '-1[use tabular output, one line per alignment]' \
            '--dna[use DNA alphabet (don'\''t autodetect)]' \
            '--rna[use RNA alphabet (don'\''t autodetect)]' \
            '--amino[use protein alphabet (don'\''t autodetect)]' \
            "*: :_files"

    }

    function _easel_downsample {
        _arguments \
            '-h[show brief help on version and usage]' \
            '-s[sequence sampling: <infile> is file or stream of seqs]' \
            '-S[big sequence sample: <infile> is (seekable) seq file]' \
            '--seed[set random number generator seed \[0\]]' \
            "*: :_files"

    }

    function _easel_filter {
        _arguments \
            '-h[show brief help on version and usage]' \
            '-o[send filtered output MSAs to file <f>, not stdout]' \
            '--informat[specify the input MSA file is in format <s>]' \
            '--outformat[write the filtered output MSA in format <s>]' \
            '--dna[specify that input MSA is DNA (don'\''t autodetect)]' \
            '--rna[... that input MSA is RNA]' \
            '--amino[... that input MSA is protein]' \
            '--ignore-rf[ignore any RF line; always determine our own consensus]' \
            '--fragthresh[seq is fragment if aspan/alen < fragthresh \[0.5\]]' \
            '--symfrac[col is consensus if nres/(nres+ngap) >= symfrac \[0.5\]]' \
            '--no-sampling[never use subsampling to determine consensus]' \
            '--nsamp[number of seqs to sample (if using sampling) \[10000\]]' \
            '--sampthresh[switch to using sampling when nseq > nsamp \[50000\]]' \
            '--maxfrag[if sample has > maxfrag fragments, don'\''t use sample \[5000\]]' \
            '-s[set random number seed to <n> \[42\]]' \
            '--conscover[keep seq whose alispan has better consensus coverage \[default\]]' \
            '--randorder[... or with random preference]' \
            '--origorder[... or prefer seq that comes first in order]' \
            "*: :_files"

    }

    function _easel_index {
        _arguments \
            '-h[show brief help on version and usage]' \
            '-a[index accessions too, if present]' \
            '-u[parse UniProt db|acc|id names; index id too (and acc, w/ -a)]' \
            '--informat[specify that input file is in format <s>]' \
            "*: :_files"

    }


function _easel {
    local line state

    function _commands {
        local -a commands
        commands=(
            'alistat:summary statistics for a multiple seq alignment file'
            'downsample:downsample <m> things from larger <infile> of n things'
            'filter:remove seqs >= <maxid> fractional identity from MSA'
            'index:create SSI fast lookup index for sequence/alignment file'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (alistat)
            _easel_alistat
            ;;

        (downsample)
            _easel_downsample
            ;;

        (filter)
            _easel_filter
            ;;

        (index)
            _easel_index
            ;;

        esac
        ;;
     esac

}

