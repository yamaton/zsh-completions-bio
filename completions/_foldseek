#compdef _foldseek foldseek

# Auto-generated with h2o

    function _foldseek_easy-search {
        _arguments \
            '--comp-bias-corr[Correct for locally biased amino acid composition (range 0-1) \[1\]]' \
            '--comp-bias-corr-scale[Correct for locally biased amino acid composition (range 0-1) \[1.000\]]' \
            '--seed-sub-mat[Substitution matrix file for k-mer generation \[aa:3di.out,nucl:3di.out\]]' \
            '-s[Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive \[9.500\]]' \
            '-k[k-mer length (0: automatically set to optimum) \[0\]]' \
            '--k-score[k-mer threshold for generating similar k-mer lists \[seq:2147483647,prof:2147483647\]]' \
            '--max-seqs[Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) \[300\]]' \
            '--split[Split input into N equally distributed chunks. 0: set the best split automatically \[0\]]' \
            '--split-mode[0: split target db; 1: split query db; 2: auto, depending on main memory \[2\]]' \
            '--split-memory-limit[Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory \[0\]]' \
            '--diag-score[Use ungapped diagonal scoring during prefilter \[1\]]' \
            '--exact-kmer-matching[Extract only exact k-mers for matching (range 0-1) \[0\]]' \
            '--mask[Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking \[1\]]' \
            '--mask-prob[Mask sequences is probablity is above threshold \[0.900\]]' \
            '--mask-lower-case[Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region \[0\]]' \
            '--min-ungapped-score[Accept only matches with ungapped alignment score above threshold \[15\]]' \
            '--spaced-kmer-mode[0: use consecutive positions in k-mers; 1: use spaced k-mers \[1\]]' \
            '--spaced-kmer-pattern[User-specified spaced k-mer pattern \[\]]' \
            '--local-tmp[Path where some of the temporary files will be created \[\]]' \
            '--min-seq-id[List matches above this sequence identity (for clustering) (range 0.0-1.0) \[0.000\]]' \
            '-c[List matches above this fraction of aligned (covered) residues (see --cov-mode) \[0.000\]]' \
            '--cov-mode[0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length \[0\]]' \
            '--max-rejected[Maximum rejected alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '--max-accept[Maximum accepted alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '-a[Add backtrace string (convert to alignments with mmseqs convertalis module) \[0\]]' \
            '--alignment-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id \[3\]]' \
            '--alignment-output-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format \[0\]]' \
            '-e[List matches below this E-value (range 0.0-inf) \[1.000E-03\]]' \
            '--min-aln-len[Minimum alignment length (range 0-INT_MAX) \[0\]]' \
            '--seq-id-mode[0: alignment length 1: shorter, 2: longer sequence \[0\]]' \
            '--alt-ali[Show up to this many alternative alignments \[0\]]' \
            '--gap-open[Gap open cost \[aa:7,nucl:7\]]' \
            '--gap-extend[Gap extension cost \[aa:2,nucl:2\]]' \
            '--tmscore-threshold[accept alignments with a tmsore > thr \[0.0,1.0\] \[0.500\]]' \
            '--tmalign-fast[turn on fast search in TM-align \[1\]]' \
            '--alignment-type[How to compute the alignment:   0: 3di alignment 1: TM alignment 2: 3Di+AA \[2\]]' \
            '--tar-include[Include file names based on this regex \[.*\]]' \
            '--tar-exclude[Exclude file names based on this regex \[^$\]]' \
            '--format-mode[0: BLAST-TAB 1: SAM 2: BLAST-TAB + query/db length 3: Pretty HTML 4: BLAST-TAB + column headers BLAST-TAB (0) and BLAST-TAB + column headers (4) support custom output formats (--format-output) \[0\]]' \
            '--format-output[Choose comma separated list of output columns from: query,target,evalue,gapopen,pident,fident,nident,qstart,qend,qlen tstart,tend,tlen,alnlen,raw,bits,cigar,qseq,tseq,qheader,theader,qaln,taln,mismatch,qcov,tcov qset,qsetid,tset,tsetid,taxid,taxname,taxlineagebla,qca,tca,t,u,alntmscore]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--sub-mat[Substitution matrix file \[aa:3di.out,nucl:3di.out\]]' \
            '--max-seq-len[Maximum sequence length \[65535\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '--remove-tmp-files[Delete temporary files \[1\]]' \
            '--mpi-runner[Use MPI on compute cluster with this MPI command (e.g. "mpirun -np 42") \[\]]' \
            '--force-reuse[Reuse tmp filse in tmp/latest folder ignoring parameters and version changes \[0\]]' \
            '--zdrop[Maximal allowed difference between score values before alignment is truncated (nucleotide alignment only) \[40\]]' \
            '--chain-name-mode[Add chain to name: 0: auto 1: always add]' \
            '--write-lookup[write .lookup file containing mapping from internal id, fasta id and file number \[1\]]' \
            '--db-output[Return a result DB instead of a text file \[0\]]' \
            "*: :_files"

    }

    function _foldseek_easy-rbh {
        _arguments \
            '--comp-bias-corr[Correct for locally biased amino acid composition (range 0-1) \[1\]]' \
            '--comp-bias-corr-scale[Correct for locally biased amino acid composition (range 0-1) \[1.000\]]' \
            '--seed-sub-mat[Substitution matrix file for k-mer generation \[aa:3di.out,nucl:3di.out\]]' \
            '-s[Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive \[4.000\]]' \
            '-k[k-mer length (0: automatically set to optimum) \[0\]]' \
            '--k-score[k-mer threshold for generating similar k-mer lists \[seq:2147483647,prof:2147483647\]]' \
            '--max-seqs[Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) \[300\]]' \
            '--split[Split input into N equally distributed chunks. 0: set the best split automatically \[0\]]' \
            '--split-mode[0: split target db; 1: split query db; 2: auto, depending on main memory \[2\]]' \
            '--split-memory-limit[Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory \[0\]]' \
            '--diag-score[Use ungapped diagonal scoring during prefilter \[1\]]' \
            '--exact-kmer-matching[Extract only exact k-mers for matching (range 0-1) \[0\]]' \
            '--mask[Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking \[1\]]' \
            '--mask-prob[Mask sequences is probablity is above threshold \[0.900\]]' \
            '--mask-lower-case[Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region \[0\]]' \
            '--min-ungapped-score[Accept only matches with ungapped alignment score above threshold \[15\]]' \
            '--spaced-kmer-mode[0: use consecutive positions in k-mers; 1: use spaced k-mers \[1\]]' \
            '--spaced-kmer-pattern[User-specified spaced k-mer pattern \[\]]' \
            '--local-tmp[Path where some of the temporary files will be created \[\]]' \
            '--min-seq-id[List matches above this sequence identity (for clustering) (range 0.0-1.0) \[0.000\]]' \
            '-c[List matches above this fraction of aligned (covered) residues (see --cov-mode) \[0.000\]]' \
            '--cov-mode[0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length \[0\]]' \
            '--max-rejected[Maximum rejected alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '--max-accept[Maximum accepted alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '-a[Add backtrace string (convert to alignments with mmseqs convertalis module) \[0\]]' \
            '--alignment-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id \[3\]]' \
            '--alignment-output-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format \[0\]]' \
            '-e[List matches below this E-value (range 0.0-inf) \[1.000E-03\]]' \
            '--min-aln-len[Minimum alignment length (range 0-INT_MAX) \[0\]]' \
            '--seq-id-mode[0: alignment length 1: shorter, 2: longer sequence \[0\]]' \
            '--alt-ali[Show up to this many alternative alignments \[0\]]' \
            '--gap-open[Gap open cost \[aa:11,nucl:5\]]' \
            '--gap-extend[Gap extension cost \[aa:1,nucl:2\]]' \
            '--tmscore-threshold[accept alignments with a tmsore > thr \[0.0,1.0\] \[0.500\]]' \
            '--tmalign-fast[turn on fast search in TM-align \[1\]]' \
            '--alignment-type[How to compute the alignment:   0: 3di alignment 1: TM alignment 2: 3Di+AA \[2\]]' \
            '--tar-include[Include file names based on this regex \[.*\]]' \
            '--tar-exclude[Exclude file names based on this regex \[^$\]]' \
            '--format-mode[0: BLAST-TAB 1: SAM 2: BLAST-TAB + query/db length 3: Pretty HTML 4: BLAST-TAB + column headers BLAST-TAB (0) and BLAST-TAB + column headers (4) support custom output formats (--format-output) \[0\]]' \
            '--format-output[Choose comma separated list of output columns from: query,target,evalue,gapopen,pident,fident,nident,qstart,qend,qlen tstart,tend,tlen,alnlen,raw,bits,cigar,qseq,tseq,qheader,theader,qaln,taln,mismatch,qcov,tcov qset,qsetid,tset,tsetid,taxid,taxname,taxlineagebla,qca,tca,t,u,alntmscore]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--sub-mat[Substitution matrix file \[aa:3di.out,nucl:3di.out\]]' \
            '--max-seq-len[Maximum sequence length \[65535\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '--remove-tmp-files[Delete temporary files \[1\]]' \
            '--mpi-runner[Use MPI on compute cluster with this MPI command (e.g. "mpirun -np 42") \[\]]' \
            '--force-reuse[Reuse tmp filse in tmp/latest folder ignoring parameters and version changes \[0\]]' \
            '--pca[Pseudo count admixture strength \[\]]' \
            '--pcb[Pseudo counts: Neff at half of maximum admixture (range 0.0-inf) \[\]]' \
            '--zdrop[Maximal allowed difference between score values before alignment is truncated (nucleotide alignment only) \[40\]]' \
            '--chain-name-mode[Add chain to name:   0: auto 1: always add]' \
            '--write-lookup[write .lookup file containing mapping from internal id, fasta id and file number \[0\]]' \
            '--translation-table[1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA]' \
            '--db-output[Return a result DB instead of a text file \[0\]]' \
            "*: :_files"

    }

    function _foldseek_createdb {
        _arguments \
            '--tar-include[Include file names based on this regex \[.*\]]' \
            '--tar-exclude[Exclude file names based on this regex \[^$\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--chain-name-mode[Add chain to name: 0: auto 1: always add]' \
            '--write-lookup[write .lookup file containing mapping from internal id, fasta id and file number \[1\]]' \
            "*: :_files"

    }

    function _foldseek_search {
        _arguments \
            '--comp-bias-corr[Correct for locally biased amino acid composition (range 0-1) \[1\]]' \
            '--comp-bias-corr-scale[Correct for locally biased amino acid composition (range 0-1) \[1.000\]]' \
            '--seed-sub-mat[Substitution matrix file for k-mer generation \[aa:3di.out,nucl:3di.out\]]' \
            '-s[Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive \[9.500\]]' \
            '-k[k-mer length (0: automatically set to optimum) \[0\]]' \
            '--k-score[k-mer threshold for generating similar k-mer lists \[seq:2147483647,prof:2147483647\]]' \
            '--max-seqs[Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) \[1000\]]' \
            '--split[Split input into N equally distributed chunks. 0: set the best split automatically \[0\]]' \
            '--split-mode[0: split target db; 1: split query db; 2: auto, depending on main memory \[2\]]' \
            '--split-memory-limit[Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory \[0\]]' \
            '--diag-score[Use ungapped diagonal scoring during prefilter \[1\]]' \
            '--exact-kmer-matching[Extract only exact k-mers for matching (range 0-1) \[0\]]' \
            '--mask[Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking \[0\]]' \
            '--mask-prob[Mask sequences is probablity is above threshold \[1.000\]]' \
            '--mask-lower-case[Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region \[0\]]' \
            '--min-ungapped-score[Accept only matches with ungapped alignment score above threshold \[15\]]' \
            '--spaced-kmer-mode[0: use consecutive positions in k-mers; 1: use spaced k-mers \[1\]]' \
            '--spaced-kmer-pattern[User-specified spaced k-mer pattern \[\]]' \
            '--local-tmp[Path where some of the temporary files will be created \[\]]' \
            '--min-seq-id[List matches above this sequence identity (for clustering) (range 0.0-1.0) \[0.000\]]' \
            '-c[List matches above this fraction of aligned (covered) residues (see --cov-mode) \[0.000\]]' \
            '--cov-mode[0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length \[0\]]' \
            '--max-rejected[Maximum rejected alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '--max-accept[Maximum accepted alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '-a[Add backtrace string (convert to alignments with mmseqs convertalis module) \[0\]]' \
            '--alignment-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id \[3\]]' \
            '--alignment-output-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format \[0\]]' \
            '-e[List matches below this E-value (range 0.0-inf) \[1.000E-03\]]' \
            '--min-aln-len[Minimum alignment length (range 0-INT_MAX) \[0\]]' \
            '--seq-id-mode[0: alignment length 1: shorter, 2: longer sequence \[0\]]' \
            '--alt-ali[Show up to this many alternative alignments \[0\]]' \
            '--gap-open[Gap open cost \[aa:10,nucl:10\]]' \
            '--gap-extend[Gap extension cost \[aa:1,nucl:1\]]' \
            '--tmscore-threshold[accept alignments with a tmsore > thr \[0.0,1.0\] \[0.500\]]' \
            '--tmalign-fast[turn on fast search in TM-align \[1\]]' \
            '--alignment-type[How to compute the alignment: 0: 3di alignment 1: TM alignment 2: 3Di+AA \[2\]]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--sub-mat[Substitution matrix file \[aa:3di.out,nucl:3di.out\]]' \
            '--max-seq-len[Maximum sequence length \[65535\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '--remove-tmp-files[Delete temporary files \[1\]]' \
            '--mpi-runner[Use MPI on compute cluster with this MPI command (e.g. "mpirun -np 42") \[\]]' \
            '--force-reuse[Reuse tmp filse in tmp/latest folder ignoring parameters and version changes \[0\]]' \
            "*: :_files"

    }

    function _foldseek_rbh {
        _arguments \
            '--comp-bias-corr[Correct for locally biased amino acid composition (range 0-1) \[1\]]' \
            '--comp-bias-corr-scale[Correct for locally biased amino acid composition (range 0-1) \[1.000\]]' \
            '--seed-sub-mat[Substitution matrix file for k-mer generation \[aa:3di.out,nucl:3di.out\]]' \
            '-s[Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive \[9.500\]]' \
            '-k[k-mer length (0: automatically set to optimum) \[0\]]' \
            '--k-score[k-mer threshold for generating similar k-mer lists \[seq:2147483647,prof:2147483647\]]' \
            '--max-seqs[Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) \[1000\]]' \
            '--split[Split input into N equally distributed chunks. 0: set the best split automatically \[0\]]' \
            '--split-mode[0: split target db; 1: split query db; 2: auto, depending on main memory \[2\]]' \
            '--split-memory-limit[Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory \[0\]]' \
            '--diag-score[Use ungapped diagonal scoring during prefilter \[1\]]' \
            '--exact-kmer-matching[Extract only exact k-mers for matching (range 0-1) \[0\]]' \
            '--mask[Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking \[0\]]' \
            '--mask-prob[Mask sequences is probablity is above threshold \[1.000\]]' \
            '--mask-lower-case[Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region \[0\]]' \
            '--min-ungapped-score[Accept only matches with ungapped alignment score above threshold \[15\]]' \
            '--spaced-kmer-mode[0: use consecutive positions in k-mers; 1: use spaced k-mers \[1\]]' \
            '--spaced-kmer-pattern[User-specified spaced k-mer pattern \[\]]' \
            '--local-tmp[Path where some of the temporary files will be created \[\]]' \
            '--min-seq-id[List matches above this sequence identity (for clustering) (range 0.0-1.0) \[0.000\]]' \
            '-c[List matches above this fraction of aligned (covered) residues (see --cov-mode) \[0.000\]]' \
            '--cov-mode[0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length \[0\]]' \
            '--max-rejected[Maximum rejected alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '--max-accept[Maximum accepted alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '-a[Add backtrace string (convert to alignments with mmseqs convertalis module) \[0\]]' \
            '--alignment-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id \[3\]]' \
            '--alignment-output-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format \[0\]]' \
            '-e[List matches below this E-value (range 0.0-inf) \[1.000E-03\]]' \
            '--min-aln-len[Minimum alignment length (range 0-INT_MAX) \[0\]]' \
            '--seq-id-mode[0: alignment length 1: shorter, 2: longer sequence \[0\]]' \
            '--alt-ali[Show up to this many alternative alignments \[0\]]' \
            '--gap-open[Gap open cost \[aa:10,nucl:10\]]' \
            '--gap-extend[Gap extension cost \[aa:1,nucl:1\]]' \
            '--tmscore-threshold[accept alignments with a tmsore > thr \[0.0,1.0\] \[0.500\]]' \
            '--tmalign-fast[turn on fast search in TM-align \[1\]]' \
            '--alignment-type[How to compute the alignment: 0: 3di alignment 1: TM alignment 2: 3Di+AA \[2\]]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--sub-mat[Substitution matrix file \[aa:3di.out,nucl:3di.out\]]' \
            '--max-seq-len[Maximum sequence length \[65535\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '--remove-tmp-files[Delete temporary files \[1\]]' \
            '--mpi-runner[Use MPI on compute cluster with this MPI command (e.g. "mpirun -np 42") \[\]]' \
            '--force-reuse[Reuse tmp filse in tmp/latest folder ignoring parameters and version changes \[0\]]' \
            "*: :_files"

    }

    function _foldseek_databases {
        _arguments \
            '--force-reuse[Reuse tmp filse in tmp/latest folder ignoring parameters and version changes \[0\]]' \
            '--remove-tmp-files[Delete temporary files \[0\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            "*: :_files"

    }

    function _foldseek_createindex {
        _arguments \
            '--seed-sub-mat[Substitution matrix file for k-mer generation \[aa:3di.out,nucl:3di.out\]]' \
            '-k[k-mer length (0: automatically set to optimum) \[0\]]' \
            '--comp-bias-corr[Correct for locally biased amino acid composition (range 0-1) \[1\]]' \
            '--comp-bias-corr-scale[Correct for locally biased amino acid composition (range 0-1) \[1.000\]]' \
            '--max-seqs[Maximum results per query sequence allowed to pass the prefilter (affects sensitivity) \[1000\]]' \
            '--mask[Mask sequences in k-mer stage: 0: w/o low complexity masking, 1: with low complexity masking \[0\]]' \
            '--mask-prob[Mask sequences is probablity is above threshold \[1.000\]]' \
            '--mask-lower-case[Lowercase letters will be excluded from k-mer search 0: include region, 1: exclude region \[0\]]' \
            '--spaced-kmer-mode[0: use consecutive positions in k-mers; 1: use spaced k-mers \[1\]]' \
            '--spaced-kmer-pattern[User-specified spaced k-mer pattern \[\]]' \
            '-s[Sensitivity: 1.0 faster; 4.0 fast; 7.5 sensitive \[9.500\]]' \
            '--k-score[k-mer threshold for generating similar k-mer lists \[seq:2147483647,prof:2147483647\]]' \
            '--split[Split input into N equally distributed chunks. 0: set the best split automatically \[0\]]' \
            '--split-memory-limit[Set max memory per split. E.g. 800B, 5K, 10M, 1G. Default (0) to all available system memory \[0\]]' \
            '--check-compatible[0: Always recreate index, 1: Check if recreating index is needed, 2: Fail if index is incompatible \[0\]]' \
            '--min-length[Minimum codon number in open reading frames \[30\]]' \
            '--max-length[Maximum codon number in open reading frames \[32734\]]' \
            '--max-gaps[Maximum number of codons with gaps or unknown residues before an open reading frame is rejected \[2147483647\]]' \
            '--contig-start-mode[Contig start can be 0: incomplete, 1: complete, 2: both \[2\]]' \
            '--contig-end-mode[Contig end can be 0: incomplete, 1: complete, 2: both \[2\]]' \
            '--orf-start-mode[Orf fragment can be 0: from start to stop, 1: from any to stop, 2: from last encountered start to stop (no start in the middle) \[1\]]' \
            '--forward-frames[Comma-separated list of frames on the forward strand to be extracted \[1,2,3\]]' \
            '--reverse-frames[Comma-separated list of frames on the reverse strand to be extracted \[1,2,3\]]' \
            '--translate[Translate ORF to amino acid \[0\]]' \
            '--use-all-table-starts[Use all alternatives for a start codon in the genetic table, if false - only ATG (AUG) \[0\]]' \
            '--id-offset[Numeric ids in index file are offset by this value \[0\]]' \
            '--add-orf-stop[Add stop codon '\''*'\'' at complete start and end \[0\]]' \
            '--sequence-overlap[Overlap between sequences \[0\]]' \
            '--sequence-split-mode[Sequence split mode 0: copy data, 1: soft link data and write new index, \[1\]]' \
            '--headers-split-mode[Header split mode: 0: split position, 1: original header \[0\]]' \
            '--max-seq-len[Maximum sequence length \[65535\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '--remove-tmp-files[Delete temporary files \[1\]]' \
            '--translation-table[1) CANONICAL, 2) VERT_MITOCHONDRIAL, 3) YEAST_MITOCHONDRIAL, 4) MOLD_MITOCHONDRIAL, 5) INVERT_MITOCHONDRIAL, 6) CILIATE 9) FLATWORM_MITOCHONDRIAL, 10) EUPLOTID, 11) PROKARYOTE, 12) ALT_YEAST, 13) ASCIDIAN_MITOCHONDRIAL, 14) ALT_FLATWORM_MITOCHONDRIAL 15) BLEPHARISMA, 16) CHLOROPHYCEAN_MITOCHONDRIAL, 21) TREMATODE_MITOCHONDRIAL, 22) SCENEDESMUS_MITOCHONDRIAL 23) THRAUSTOCHYTRIUM_MITOCHONDRIAL, 24) PTEROBRANCHIA_MITOCHONDRIAL, 25) GRACILIBACTERIA, 26) PACHYSOLEN, 27) KARYORELICT, 28) CONDYLOSTOMA]' \
            '--create-lookup[Create database lookup file (can be very large) \[0\]]' \
            '--strand[Strand selection only works for DNA/DNA search 0: reverse, 1: forward, 2: both \[1\]]' \
            "*: :_files"

    }

    function _foldseek_convertalis {
        _arguments \
            '--gap-open[Gap open cost \[aa:11,nucl:5\]]' \
            '--gap-extend[Gap extension cost \[aa:1,nucl:2\]]' \
            '--format-mode[0: BLAST-TAB 1: SAM 2: BLAST-TAB + query/db length 3: Pretty HTML 4: BLAST-TAB + column headers BLAST-TAB (0) and BLAST-TAB + column headers (4) support custom output formats (--format-output) \[0\]]' \
            '--format-output[Choose comma separated list of output columns from: query,target,evalue,gapopen,pident,fident,nident,qstart,qend,qlen tstart,tend,tlen,alnlen,raw,bits,cigar,qseq,tseq,qheader,theader,qaln,taln,mismatch,qcov,tcov qset,qsetid,tset,tsetid,taxid,taxname,taxlineagebla,qca,tca,t,u,alntmscore]' \
            '--sub-mat[Substitution matrix file \[aa:3di.out,nucl:3di.out\]]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            '--db-output[Return a result DB instead of a text file \[0\]]' \
            "*: :_files"

    }

    function _foldseek_tmalign {
        _arguments \
            '--min-seq-id[List matches above this sequence identity (for clustering) (range 0.0-1.0) \[0.000\]]' \
            '-c[List matches above this fraction of aligned (covered) residues (see --cov-mode) \[0.000\]]' \
            '--cov-mode[0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length \[0\]]' \
            '--max-rejected[Maximum rejected alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '--max-accept[Maximum accepted alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '-a[Add backtrace string (convert to alignments with mmseqs convertalis module) \[0\]]' \
            '--tmalign-fast[turn on fast search in TM-align \[1\]]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            "*: :_files"

    }

    function _foldseek_structurealign {
        _arguments \
            '--comp-bias-corr[Correct for locally biased amino acid composition (range 0-1) \[1\]]' \
            '--comp-bias-corr-scale[Correct for locally biased amino acid composition (range 0-1) \[1.000\]]' \
            '-a[Add backtrace string (convert to alignments with mmseqs convertalis module) \[0\]]' \
            '--alignment-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id \[0\]]' \
            '--alignment-output-mode[How to compute the alignment:   0: automatic 1: only score and end_pos 2: also start_pos and cov 3: also seq.id 4: only ungapped alignment 5: score only (output) cluster format \[0\]]' \
            '-e[List matches below this E-value (range 0.0-inf) \[1.000E-03\]]' \
            '--min-seq-id[List matches above this sequence identity (for clustering) (range 0.0-1.0) \[0.000\]]' \
            '--min-aln-len[Minimum alignment length (range 0-INT_MAX) \[0\]]' \
            '--seq-id-mode[0: alignment length 1: shorter, 2: longer sequence \[0\]]' \
            '--alt-ali[Show up to this many alternative alignments \[0\]]' \
            '-c[List matches above this fraction of aligned (covered) residues (see --cov-mode) \[0.000\]]' \
            '--cov-mode[0: coverage of query and target   1: coverage of target 2: coverage of query 3: target seq. length has to be at least x% of query length 4: query seq. length has to be at least x% of target length 5: short seq. needs to be at least x% of the other seq. length \[0\]]' \
            '--max-rejected[Maximum rejected alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '--max-accept[Maximum accepted alignments before alignment calculation for a query is stopped \[2147483647\]]' \
            '--gap-open[Gap open cost \[aa:11,nucl:5\]]' \
            '--gap-extend[Gap extension cost \[aa:1,nucl:2\]]' \
            '--sub-mat[Substitution matrix file \[aa:3di.out,nucl:3di.out\]]' \
            '--max-seq-len[Maximum sequence length \[65535\]]' \
            '--db-load-mode[Database preload mode 0: auto, 1: fread, 2: mmap, 3: mmap+touch \[0\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            "*: :_files"

    }

    function _foldseek_aln2tmscore {
        _arguments \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            "*: :_files"

    }

    function _foldseek_clust {
        _arguments \
            '--cluster-mode[0: Set-Cover (greedy) 1: Connected component (BLASTclust) 2,3: Greedy clustering by sequence length (CDHIT) \[0\]]' \
            '--max-iterations[Maximum depth of breadth first search in connected component clustering \[1000\]]' \
            '--similarity-type[Type of score used for clustering. 1: alignment score 2: sequence identity \[2\]]' \
            '--threads[Number of CPU-cores used (all by default) \[4\]]' \
            '--compressed[Write compressed output \[0\]]' \
            '-v[Verbosity level: 0: quiet, 1: +errors, 2: +warnings, 3: +info \[3\]]' \
            "*: :_files"

    }


function _foldseek {
    local line state

    function _commands {
        local -a commands
        commands=(
            'easy-search:Sensitive homology search'
            'easy-rbh:Find reciprocal best hit'
            'createdb:Convert PDB/mmCIF/tar\[.gz\] files to an db.'
            'search:Sensitive homology search'
            'rbh:Reciprocal best hit search'
            'databases:List and download databases'
            'createindex:Store precomputed index on disk to reduce search overhead'
            'convertalis:Convert alignment DB to BLAST-tab, SAM or custom format'
            'tmalign:Compute tm-score'
            'structurealign:Compute structural alignment using 3Di alphabet, amino acids and neighborhood information'
            'aln2tmscore:Compute tmscore of an alignment database'
            'clust:Cluster result by Set-Cover/Connected-Component/Greedy-Incremental'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (easy-search)
            _foldseek_easy-search
            ;;

        (easy-rbh)
            _foldseek_easy-rbh
            ;;

        (createdb)
            _foldseek_createdb
            ;;

        (search)
            _foldseek_search
            ;;

        (rbh)
            _foldseek_rbh
            ;;

        (databases)
            _foldseek_databases
            ;;

        (createindex)
            _foldseek_createindex
            ;;

        (convertalis)
            _foldseek_convertalis
            ;;

        (tmalign)
            _foldseek_tmalign
            ;;

        (structurealign)
            _foldseek_structurealign
            ;;

        (aln2tmscore)
            _foldseek_aln2tmscore
            ;;

        (clust)
            _foldseek_clust
            ;;

        esac
        ;;
     esac

}

