#compdef _planemo planemo

# Auto-generated with h2o

    function _planemo_autoupdate {
        _arguments \
            '--dry-run[Perform a dry run autoupdate without modifying the XML files.]' \
            {-r,--recursive}'[Recursively perform command for subdirectories.]' \
            '--test[Test updated XML files.]' \
            '--skiplist[Skiplist file, containing a list of tools or workflows for which autoupdate should be skipped.]' \
            '--skip_requirements[Comma-separated list of requirements which should be not be updated. Default is python,r-base,perl.]' \
            '--update_test_data[Update test-data directory with job outputs (normally written to directory --job_output_files if specified.)]' \
            {--paste_test_data_paths,--no_paste_test_data_paths}'[By default Planemo will use or not use Galaxy'\''s path paste option to load test data into a history based on the engine type it is targeting. This can override the logic to explicitly enable or disable path pasting.]' \
            '--test_output[Output test report (HTML - for humans) defaults to tool_test_output.html.]':file:_files \
            '--test_output_text[Output test report (Basic text - for display in CI)]':file:_files \
            '--test_output_markdown[Output test report (Markdown style - for humans & computers)]':file:_files \
            '--test_output_xunit[Output test report (xunit style - for CI systems]':file:_files \
            '--test_output_junit[Output test report (jUnit style - for CI systems]':file:_files \
            '--test_output_allure[Output test allure2 framework resutls]':file:_files \
            '--test_output_json[Output test report (planemo json) defaults to tool_test_output.json.]':file:_files \
            '--job_output_files[Write job outputs to specified directory.]':file:_files \
            '--summary[Summary style printed to planemo'\''s standard output (see output reports for more complete summary). Set to '\''none'\'' to disable completely.]' \
            '--test_timeout[Maximum runtime of a single test in seconds.]' \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            {--report_level,--report_xunit}'[Output an XUnit report, useful for CI testing]' \
            {--fail_level,--galaxy_url}'[Remote Galaxy URL to use with external Galaxy engine.]' \
            '--galaxy_user_key[User key to use with external Galaxy engine.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_ci_find_repos {
        _arguments \
            '--exclude[Paths to exclude.]':file:_files \
            '--exclude_from[File of paths to exclude.]':file:_files \
            '--changed_in_commit_range[Exclude paths unchanged in git commit range.]' \
            '--chunk_count[Split output into chunks of this many item and print --chunk such group.]' \
            '--chunk[When output is split into --chunk_count groups, output the group 0-indexedby this option.]' \
            '--output[File to output to, or - for standard output.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_ci_find_tools {
        _arguments \
            '--exclude[Paths to exclude.]':file:_files \
            '--exclude_from[File of paths to exclude.]':file:_files \
            '--changed_in_commit_range[Exclude paths unchanged in git commit range.]' \
            '--chunk_count[Split output into chunks of this many item and print --chunk such group.]' \
            '--chunk[When output is split into --chunk_count groups, output the group 0-indexedby this option.]' \
            '--output[File to output to, or - for standard output.]' \
            '--group_tools[Group tools of the same repository on a single line.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_clone {
        _arguments \
            {--fork,--skip_fork}'[--branch TEXT Create a named branch on result.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_conda_build {
        _arguments \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_conda_env {
        _arguments \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_conda_init {
        _arguments \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_conda_install {
        _arguments \
            {-r,--recursive}'[Recursively perform command for subdirectories.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--global[Install Conda dependencies globally instead of in requirement specific environments packaged for tools. If the Conda bin directory is on your PATH, tools may still use binaries but this is more designed for interactive testing and debugging.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_conda_lint {
        _arguments \
            {--report_level,--fail_level,-r,--recursive}'[Recursively perform command for nested conda directories.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_conda_search {
        _arguments \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_config_init {
        _arguments \
            '--template[--help Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_container_register {
        _arguments \
            {-r,--recursive}'[Recursively perform command for subdirectories.]' \
            '--mulled_namespace[Build a mulled image with the specified namespace - defaults to biocontainers. Galaxy currently only recognizes images with the namespace biocontainers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--output_directory[Container registration directory (defaults to ~/.planemo/multi-package-containers.]':file:_files \
            {-m,--message}'[Commit and pull request message template for registration interactions.]' \
            {--pull_request,--no_pull_request}'[Fork and create a pull request against BioContainers/multi-package-containers for these changes.]' \
            {--force_push,--no_force_push}'[Force push branch for pull request in case it already exists.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_create_alias {
        _arguments \
            '--alias[Name of an alias.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command. \[required\]]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_create_gist {
        _arguments \
            '--link_type[Link type to generate for the file.]' \
            '--link_type[Link type to generate for the file.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_database_create {
        _arguments \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_database_delete {
        _arguments \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_database_list {
        _arguments \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_delete_alias {
        _arguments \
            '--alias[Name of an alias. \[required\]]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command. \[required\]]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_docker_build {
        _arguments \
            {--dockerfile,--docker_image_cache,--docker_cmd}'[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_docker_shell {
        _arguments \
            '--from_tag[Treat the tool'\''s Docker container identifier as a locally cached tag.]' \
            '--shell[Shell to launch in container (defaults to /bin/bash).]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_dockstore_init {
        _arguments \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_docs {
        _arguments \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_lint {
        _arguments \
            {--report_level,--report_xunit}'[Output an XUnit report, useful for CI testing]' \
            {--fail_level,-s,--skip}'[Comma-separated list of lint tests to skip (e.g. passing --skip '\''citations,xml_order'\'' would skip linting of citations and bestpractice XML ordering.]' \
            {--xsd,--no_xsd}'[Include tool XSD validation in linting process.]' \
            {-r,--recursive}'[Recursively perform command for subdirectories.]' \
            '--urls[Check validity of URLs in XML files]' \
            '--doi[Check validity of DOIs in XML files]' \
            '--conda_requirements[Check tool requirements for availability in best practice Conda channels.]' \
            {--biocontainer,--biocontainers}'[Check best practice BioContainer namespaces for a container definition applicable for this tool.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_list_alias {
        _arguments \
            '--profile[Name of profile (created with the profile_create command) to use with this command. \[required\]]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_list_invocations {
        _arguments \
            '--profile[Name of profile (created with the profile_create command) to use with this command. \[required\]]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_list_repos {
        _arguments \
            '--exclude[Paths to exclude.]':file:_files \
            '--exclude_from[File of paths to exclude.]':file:_files \
            '--changed_in_commit_range[Exclude paths unchanged in git commit range.]' \
            '--chunk_count[Split output into chunks of this many item and print --chunk such group.]' \
            '--chunk[When output is split into --chunk_count groups, output the group 0-indexedby this option.]' \
            '--output[File to output to, or - for standard output.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_merge_test_reports {
        _arguments \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_mull {
        _arguments \
            {-r,--recursive}'[Recursively perform command for subdirectories.]' \
            '--mulled_conda_version[Install a specific version of Conda before running the command, by default the version that comes with the continuumio miniconda3 image will be used under Linux and under Mac OS X Conda will be upgraded to to work around a bug in 4.2.]' \
            '--mulled_namespace[Build a mulled image with the specified namespace - defaults to biocontainers. Galaxy currently only recognizes images with the namespace biocontainers.]' \
            '--mulled_command[Mulled action to perform for targets - this defaults to '\''build-and-test'\''.]' \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_mulled_init {
        _arguments \
            '--mulled_conda_version[Install a specific version of Conda before running the command, by default the version that comes with the continuumio miniconda3 image will be used under Linux and under Mac OS X Conda will be upgraded to to work around a bug in 4.2.]' \
            '--mulled_namespace[Build a mulled image with the specified namespace - defaults to biocontainers. Galaxy currently only recognizes images with the namespace biocontainers.]' \
            '--mulled_command[Mulled action to perform for targets - this defaults to '\''build-and-test'\''.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_normalize {
        _arguments \
            '--expand_macros[Expand macros while normalizing tool XML - useful to see how macros are evaluated.]' \
            '--skip_reorder[Planemo will reorder top-level tool blocks according to tool development best practices as part of this command, this flag will disable that behavior.]' \
            '--skip_reindent[Planemo will reindent the XML according to tool development best practices as part of this command, this flag will disable that behavior.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_open {
        _arguments \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_profile_create {
        _arguments \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--engine[Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            '--galaxy_url[Remote Galaxy URL to use with external Galaxy engine.]' \
            '--galaxy_user_key[User key to use with external Galaxy engine.]' \
            '--galaxy_admin_key[Admin key to use with external Galaxy engine.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_profile_delete {
        _arguments \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_profile_list {
        _arguments \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_project_init {
        _arguments \
            '--template[--help Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_pull_request {
        _arguments \
            {-m,--message}'[Message describing the pull request to create.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_rerun {
        _arguments \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--galaxy_url[Remote Galaxy URL to use with external Galaxy engine.]' \
            '--galaxy_user_key[User key to use with external Galaxy engine.]' \
            '--invocation[Rerun failed jobs associated by one or more invocation IDs.]' \
            '--history[Rerun failed jobs associated by one or more history IDs.]' \
            '--job[Rerun failed jobs specified by one or more job IDs.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_run {
        _arguments \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--port[Port to serve Galaxy on (default is 9090).]' \
            '--host[Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.]' \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--cwl[Configure Galaxy for use with CWL tool. (this option is experimental and will be replaced when and if CWL support is merged into Galaxy).]' \
            '--cwl_galaxy_root[Root of development galaxy directory to execute command with (must be branch of Galaxy with CWL support, this option is experimental and will be replaced with --galaxy_root when and if CWL support is merged into Galaxy.]':file:_files \
            '--tags[Comma-separated list of tags to add to the created history.]' \
            {--output_directory,--outdir}'[Where to store outputs of a '\''run'\'' task.]':file:_files \
            '--output_json[Where to store JSON dictionary describing outputs of a '\''run'\'' task.]':file:_files \
            {--download_outputs,--no_download_outputs}'[After tool or workflow runs are complete, download the output files to the location specified by --output_directory.]' \
            '--engine[Select an engine to run or test artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container or the CWL reference implementation '\''cwltool'\'' and '\''toil'\'' be selected.]' \
            '--non_strict_cwl[Disable strict validation of CWL.]' \
            {--no-container,--no_container}'[If cwltool engine is used, disable Docker container usage.]' \
            '--docker_galaxy_image[Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.]' \
            '--docker_extra_volume[Extra path to mount if --engine docker.]':file:_files \
            '--ignore_dependency_problems[When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.]' \
            {--shed_install,--no_shed_install}'[By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.]' \
            {--install_tool_dependencies,--no_install_tool_dependencies}'[Turn on installation of tool dependencies using classic toolshed packages.]' \
            {--install_resolver_dependencies,--no_install_resolver_dependencies}'[Skip installing tool dependencies through resolver (e.g. conda).]' \
            '--install_repository_dependencie[s / --no_install_repository_dependencies Skip installing the repository dependencies.]' \
            '--galaxy_url[Remote Galaxy URL to use with external Galaxy engine.]' \
            '--galaxy_admin_key[Admin key to use with external Galaxy engine.]' \
            '--galaxy_user_key[User key to use with external Galaxy engine.]' \
            '--history_name[Name to give a Galaxy history, if one is created.]' \
            '--no_wait[After invoking a job or workflow, do not wait for completion.]' \
            '--update_test_data[Update test-data directory with job outputs (normally written to directory --job_output_files if specified.)]' \
            {--paste_test_data_paths,--no_paste_test_data_paths}'[By default Planemo will use or not use Galaxy'\''s path paste option to load test data into a history based on the engine type it is targeting. This can override the logic to explicitly enable or disable path pasting.]' \
            '--test_output[Output test report (HTML - for humans) defaults to tool_test_output.html.]':file:_files \
            '--test_output_text[Output test report (Basic text - for display in CI)]':file:_files \
            '--test_output_markdown[Output test report (Markdown style - for humans & computers)]':file:_files \
            '--test_output_xunit[Output test report (xunit style - for CI systems]':file:_files \
            '--test_output_junit[Output test report (jUnit style - for CI systems]':file:_files \
            '--test_output_allure[Output test allure2 framework resutls]':file:_files \
            '--test_output_json[Output test report (planemo json) defaults to tool_test_output.json.]':file:_files \
            '--job_output_files[Write job outputs to specified directory.]':file:_files \
            '--summary[Summary style printed to planemo'\''s standard output (see output reports for more complete summary). Set to '\''none'\'' to disable completely.]' \
            '--test_timeout[Maximum runtime of a single test in seconds.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_serve {
        _arguments \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--port[Port to serve Galaxy on (default is 9090).]' \
            '--host[Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.]' \
            '--engine[Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.]' \
            '--non_strict_cwl[Disable strict validation of CWL.]' \
            '--docker_galaxy_image[Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.]' \
            '--docker_extra_volume[Extra path to mount if --engine docker.]':file:_files \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--daemon[Serve Galaxy process as a daemon.]' \
            '--pid_file[Location of pid file is executed with --daemon.]':file:_files \
            '--ignore_dependency_problems[When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.]' \
            '--skip_client_build[Do not build Galaxy client when serving Galaxy.]' \
            {--shed_install,--no_shed_install}'[By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.]' \
            '--cwl[Configure Galaxy for use with CWL tool. (this option is experimental and will be replaced when and if CWL support is merged into Galaxy).]' \
            '--cwl_galaxy_root[Root of development galaxy directory to execute command with (must be branch of Galaxy with CWL support, this option is experimental and will be replaced with --galaxy_root when and if CWL support is merged into Galaxy.]':file:_files \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_share_test {
        _arguments \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_build {
        _arguments \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_create {
        _arguments \
            {-r,--recursive}'[Recursively perform command for nested repository directories.]' \
            '--fail_fast[If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.]' \
            '--owner[Tool Shed repository owner (username).]' \
            '--name[Tool Shed repository name (defaults to the inferred tool directory name).]' \
            '--shed_email[E-mail for Tool Shed auth (required unless shed_key is specified).]' \
            '--shed_key[API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.]' \
            '--shed_key_from_env[Environment variable to read API key for Tool Shed access from.]' \
            '--shed_password[Password for Tool Shed auth (required unless shed_key is specified).]' \
            {-t,--shed_target}'[Tool Shed to target (this can be '\''toolshed'\'', '\''testtoolshed'\'', '\''local'\'' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.]' \
            {-m,--message}'[Commit message for tool shed upload.]' \
            '--skip_upload[Skip upload contents as part of operation, only update metadata.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_diff {
        _arguments \
            {-r,--recursive}'[Recursively perform command for nested repository directories.]' \
            '--fail_fast[If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.]' \
            '--owner[Tool Shed repository owner (username).]' \
            '--name[Tool Shed repository name (defaults to the inferred tool directory name).]' \
            '--shed_email[E-mail for Tool Shed auth (required unless shed_key is specified).]' \
            '--shed_key[API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.]' \
            '--shed_key_from_env[Environment variable to read API key for Tool Shed access from.]' \
            '--shed_password[Password for Tool Shed auth (required unless shed_key is specified).]' \
            {-t,--shed_target}'[Tool Shed to target (this can be '\''toolshed'\'', '\''testtoolshed'\'', '\''local'\'' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.]' \
            {-o,--output}'[Send diff output to specified file.]':file:_files \
            '--shed_target_source[Source Tool Shed to diff against (will ignore local project info specified). To compare the main Tool Shed against the test, set this to testtoolshed.]' \
            '--raw[Do not attempt smart diff of XML to filter out attributes populated by the Tool Shed.]' \
            '--report_xunit[Output an XUnit report, useful for CI testing]':file:_files \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_download {
        _arguments \
            {-r,--recursive}'[Recursively perform command for nested repository directories.]' \
            '--fail_fast[If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.]' \
            '--owner[Tool Shed repository owner (username).]' \
            '--name[Tool Shed repository name (defaults to the inferred tool directory name).]' \
            '--shed_email[E-mail for Tool Shed auth (required unless shed_key is specified).]' \
            '--shed_key[API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.]' \
            '--shed_key_from_env[Environment variable to read API key for Tool Shed access from.]' \
            '--shed_password[Password for Tool Shed auth (required unless shed_key is specified).]' \
            {-t,--shed_target}'[Tool Shed to target (this can be '\''toolshed'\'', '\''testtoolshed'\'', '\''local'\'' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.]' \
            '--destination[Destination pattern of tarball(s) to download - if this doesn'\''t end in '\''gz'\'' it will be treated as a directory to extract tool contents into (defaults to shed_download.tar.gz). If multiple repositories are discovered in a .shed.yml file these will be created as shed_download_<name>.tar.gz by default for instance, simpler repositories will just be downloaded to the specified file.]':file:_files \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_init {
        _arguments \
            '--from_workflow[Attempt to generate repository dependencies from specified workflow.]':file:_files \
            '--description[Specify repository description for .shed.yml.]' \
            '--long_description[Specify repository long_description for .shed.yml.]' \
            '--remote_repository_url[Specify repository remote_repository_url for .shed.yml.]' \
            '--homepage_url[Specify repository homepage_url for .shed.yml.]' \
            '--category[Specify repository category for .shed.yml (may specify multiple).]' \
            '--owner[Tool Shed repository owner (username).]' \
            '--name[Tool Shed repository name (defaults to the inferred tool directory name).]' \
            {-f,--force}'[Overwrite existing files if present.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_lint {
        _arguments \
            {-r,--recursive}'[Recursively perform command for nested repository directories.]' \
            '--fail_fast[If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.]' \
            {--report_level,--fail_level,--tools}'[Lint tools discovered in the process of linting repositories.]' \
            {--xsd,--no_xsd}'[Include tool XSD validation in linting process.]' \
            '--ensure_metadata[Ensure .shed.yml files contain enough metadata for each repository to allow automated creation and/or updates.]' \
            '--urls[Check validity of URLs in XML files]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_serve {
        _arguments \
            {-r,--recursive}'[Recursively perform command for nested repository directories.]' \
            '--fail_fast[If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.]' \
            '--owner[Tool Shed repository owner (username).]' \
            '--name[Tool Shed repository name (defaults to the inferred tool directory name).]' \
            '--shed_email[E-mail for Tool Shed auth (required unless shed_key is specified).]' \
            '--shed_key[API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.]' \
            '--shed_key_from_env[Environment variable to read API key for Tool Shed access from.]' \
            '--shed_password[Password for Tool Shed auth (required unless shed_key is specified).]' \
            {-t,--shed_target}'[Tool Shed to target (this can be '\''toolshed'\'', '\''testtoolshed'\'', '\''local'\'' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.]' \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--port[Port to serve Galaxy on (default is 9090).]' \
            '--host[Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.]' \
            '--engine[Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.]' \
            '--non_strict_cwl[Disable strict validation of CWL.]' \
            '--docker_galaxy_image[Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.]' \
            '--docker_extra_volume[Extra path to mount if --engine docker.]':file:_files \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--daemon[Serve Galaxy process as a daemon.]' \
            '--pid_file[Location of pid file is executed with --daemon.]':file:_files \
            '--ignore_dependency_problems[When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.]' \
            '--skip_client_build[Do not build Galaxy client when serving Galaxy.]' \
            {--shed_install,--no_shed_install}'[By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.]' \
            '--skip_dependencies[Do not install shed dependencies as part of repository installation.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_test {
        _arguments \
            {-r,--recursive}'[Recursively perform command for nested repository directories.]' \
            '--fail_fast[If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.]' \
            '--owner[Tool Shed repository owner (username).]' \
            '--name[Tool Shed repository name (defaults to the inferred tool directory name).]' \
            '--shed_email[E-mail for Tool Shed auth (required unless shed_key is specified).]' \
            '--shed_key[API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.]' \
            '--shed_key_from_env[Environment variable to read API key for Tool Shed access from.]' \
            '--shed_password[Password for Tool Shed auth (required unless shed_key is specified).]' \
            {-t,--shed_target}'[Tool Shed to target (this can be '\''toolshed'\'', '\''testtoolshed'\'', '\''local'\'' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.]' \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--update_test_data[Update test-data directory with job outputs (normally written to directory --job_output_files if specified.)]' \
            {--paste_test_data_paths,--no_paste_test_data_paths}'[By default Planemo will use or not use Galaxy'\''s path paste option to load test data into a history based on the engine type it is targeting. This can override the logic to explicitly enable or disable path pasting.]' \
            '--test_output[Output test report (HTML - for humans) defaults to tool_test_output.html.]':file:_files \
            '--test_output_text[Output test report (Basic text - for display in CI)]':file:_files \
            '--test_output_markdown[Output test report (Markdown style - for humans & computers)]':file:_files \
            '--test_output_xunit[Output test report (xunit style - for CI systems]':file:_files \
            '--test_output_junit[Output test report (jUnit style - for CI systems]':file:_files \
            '--test_output_allure[Output test allure2 framework resutls]':file:_files \
            '--test_output_json[Output test report (planemo json) defaults to tool_test_output.json.]':file:_files \
            '--job_output_files[Write job outputs to specified directory.]':file:_files \
            '--summary[Summary style printed to planemo'\''s standard output (see output reports for more complete summary). Set to '\''none'\'' to disable completely.]' \
            '--test_timeout[Maximum runtime of a single test in seconds.]' \
            '--skip_dependencies[Do not install shed dependencies as part of repository installation.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_update {
        _arguments \
            '--report_xunit[Output an XUnit report, useful for CI testing]':file:_files \
            {-r,--recursive}'[Recursively perform command for nested repository directories.]' \
            '--fail_fast[If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.]' \
            '--owner[Tool Shed repository owner (username).]' \
            '--name[Tool Shed repository name (defaults to the inferred tool directory name).]' \
            '--shed_email[E-mail for Tool Shed auth (required unless shed_key is specified).]' \
            '--shed_key[API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.]' \
            '--shed_key_from_env[Environment variable to read API key for Tool Shed access from.]' \
            '--shed_password[Password for Tool Shed auth (required unless shed_key is specified).]' \
            {-t,--shed_target}'[Tool Shed to target (this can be '\''toolshed'\'', '\''testtoolshed'\'', '\''local'\'' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.]' \
            {-m,--message}'[Commit message for tool shed upload.]' \
            '--force_repository_creation[If a repository cannot be found for the specified user/repo name pair, then automatically create the repository in the toolshed.]' \
            '--check_diff[Skip uploading if the shed_diff detects there would be no '\''difference'\'' (only attributes populated by the shed would be updated.)]' \
            '--skip_upload[Skip upload contents as part of operation, only update metadata.]' \
            '--skip_metadata[Skip metadata update as part of operation, only upload new contents.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_shed_upload {
        _arguments \
            {-r,--recursive}'[Recursively perform command for nested repository directories.]' \
            '--fail_fast[If multiple repositories are specified and an error occurs stop immediately instead of processing remaining repositories.]' \
            '--owner[Tool Shed repository owner (username).]' \
            '--name[Tool Shed repository name (defaults to the inferred tool directory name).]' \
            '--shed_email[E-mail for Tool Shed auth (required unless shed_key is specified).]' \
            '--shed_key[API key for Tool Shed access. An API key is required unless e-mail and password is specified. This key can be specified with either --shed_key or --shed_key_from_env.]' \
            '--shed_key_from_env[Environment variable to read API key for Tool Shed access from.]' \
            '--shed_password[Password for Tool Shed auth (required unless shed_key is specified).]' \
            {-t,--shed_target}'[Tool Shed to target (this can be '\''toolshed'\'', '\''testtoolshed'\'', '\''local'\'' (alias for http://localhost:9009/), an arbitrary url or mappings defined ~/.planemo.yml.]' \
            {-m,--message}'[Commit message for tool shed upload.]' \
            '--force_repository_creation[If a repository cannot be found for the specified user/repo name pair, then automatically create the repository in the toolshed.]' \
            '--check_diff[Skip uploading if the shed_diff detects there would be no '\''difference'\'' (only attributes populated by the shed would be updated.)]' \
            '--tar_only[Produce tar file for upload but do not publish to a tool shed.]' \
            '--tar[Specify a pre-existing tar file instead of automatically building one as part of this command.]':file:_files \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_syntax {
        _arguments \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_test {
        _arguments \
            '--failed[Re-run only failed tests. This command will read tool_test_output.json to determine which tests failed so this file must have been produced with the same set of tool ids previously.]' \
            '--polling_backoff[Poll resources with an increasing interval between requests. Useful when testing against remote and/or production instances to limit generated traffic.]' \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--update_test_data[Update test-data directory with job outputs (normally written to directory --job_output_files if specified.)]' \
            {--paste_test_data_paths,--no_paste_test_data_paths}'[By default Planemo will use or not use Galaxy'\''s path paste option to load test data into a history based on the engine type it is targeting. This can override the logic to explicitly enable or disable path pasting.]' \
            '--test_output[Output test report (HTML - for humans) defaults to tool_test_output.html.]':file:_files \
            '--test_output_text[Output test report (Basic text - for display in CI)]':file:_files \
            '--test_output_markdown[Output test report (Markdown style - for humans & computers)]':file:_files \
            '--test_output_xunit[Output test report (xunit style - for CI systems]':file:_files \
            '--test_output_junit[Output test report (jUnit style - for CI systems]':file:_files \
            '--test_output_allure[Output test allure2 framework resutls]':file:_files \
            '--test_output_json[Output test report (planemo json) defaults to tool_test_output.json.]':file:_files \
            '--job_output_files[Write job outputs to specified directory.]':file:_files \
            '--summary[Summary style printed to planemo'\''s standard output (see output reports for more complete summary). Set to '\''none'\'' to disable completely.]' \
            '--test_timeout[Maximum runtime of a single test in seconds.]' \
            '--engine[Select an engine to run or test artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container or the CWL reference implementation '\''cwltool'\'' and '\''toil'\'' be selected.]' \
            '--non_strict_cwl[Disable strict validation of CWL.]' \
            {--no-container,--no_container}'[If cwltool engine is used, disable Docker container usage.]' \
            '--docker_galaxy_image[Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.]' \
            '--docker_extra_volume[Extra path to mount if --engine docker.]':file:_files \
            '--ignore_dependency_problems[When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.]' \
            {--shed_install,--no_shed_install}'[By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.]' \
            {--install_tool_dependencies,--no_install_tool_dependencies}'[Turn on installation of tool dependencies using classic toolshed packages.]' \
            {--install_resolver_dependencies,--no_install_resolver_dependencies}'[Skip installing tool dependencies through resolver (e.g. conda).]' \
            '--install_repository_dependencie[s / --no_install_repository_dependencies Skip installing the repository dependencies.]' \
            '--galaxy_url[Remote Galaxy URL to use with external Galaxy engine.]' \
            '--galaxy_admin_key[Admin key to use with external Galaxy engine.]' \
            '--galaxy_user_key[User key to use with external Galaxy engine.]' \
            '--history_name[Name to give a Galaxy history, if one is created.]' \
            '--no_wait[After invoking a job or workflow, do not wait for completion.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_test_reports {
        _arguments \
            '--test_output[Output test report (HTML - for humans) defaults to tool_test_output.html.]':file:_files \
            '--test_output_text[Output test report (Basic text - for display in CI)]':file:_files \
            '--test_output_markdown[Output test report (Markdown style - for humans & computers)]':file:_files \
            '--test_output_xunit[Output test report (xunit style - for CI systems]':file:_files \
            '--test_output_junit[Output test report (jUnit style - for CI systems]':file:_files \
            '--test_output_allure[Output test allure2 framework resutls]':file:_files \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_tool_init {
        _arguments \
            {-i,--id}'[Short identifier for new tool (no whitespace)]' \
            {-f,--force}'[Overwrite existing tool if present.]' \
            {-t,--tool}'[Output path for new tool (default is <id>.xml)]':file:_files \
            {-n,--name}'[Name for new tool (user facing)]' \
            '--version[Tool XML version.]' \
            {-d,--description}'[Short description for new tool (user facing)]' \
            {-c,--command}'[Command potentially including cheetah variables ()(e.g. '\''seqtk seq -A $input > $output'\'')]' \
            '--example_command[Example to command with paths to build Cheetah template from (e.g. '\''seqtk seq -A 2.fastq > 2.fasta'\''). Option cannot be used with --command, should be used --example_input and --example_output.]' \
            '--example_input[For use with --example_command, replace input file (e.g. 2.fastq with a data input parameter).]' \
            '--example_output[For use with --example_command, replace input file (e.g. 2.fastq with a tool output).]' \
            '--named_output[Create a named output for use with command block for example specify --named_output=output1.bam and then use '\''-o $output1'\'' in your command block.]' \
            '--input[An input description (e.g. input.fasta)]' \
            '--output[An output location (e.g. output.bam), the Galaxy datatype is inferred from the extension.]' \
            '--help_text[Help text (reStructuredText)]' \
            '--help_from_command[Auto populate help from supplied command.]' \
            '--doi[Supply a DOI (http://www.doi.org/) easing citation of the tool for Galxy users (e.g. 10.1101/014043).]' \
            '--cite_url[Supply a URL for citation.]' \
            '--test_case[For use with --example_commmand, generate a tool test case from the supplied example.]' \
            '--macros[Generate a macros.xml for reuse across many tools.]' \
            '--version_command[Command to print version (e.g. '\''seqtk --version'\'')]' \
            '--requirement[Add a tool requirement package (e.g. '\''seqtk'\'' or '\''seqtk@1.68'\'').]' \
            '--container[Add a Docker image identifier for this tool.]' \
            '--cwl[Build a CWL tool instead of a Galaxy tool.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_training_fill_data_library {
        _arguments \
            '--topic_name[Name (directory name) of the topic to create or in which a tutorial should be created or updates \[required\]]' \
            '--tutorial_name[Name (directory name) of the tutorial to modify \[required\]]' \
            '--zenodo_link[Zenodo URL with the input data]' \
            '--datatypes[YAML file with the correspondance between Zenodo extension and Galaxy datatypes]':file:_files \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_training_generate_from_wf {
        _arguments \
            '--topic_name[Name (directory name) of the topic to create or in which a tutorial should be created or updates \[required\]]' \
            '--tutorial_name[Name (directory name) of the tutorial to modify \[required\]]' \
            '--workflow[Workflow of the tutorial (locally)]':file:_files \
            '--galaxy_url[URL of a Galaxy instance with the workflow]' \
            '--galaxy_api_key[API key on the Galaxy instance with the workflow]' \
            '--workflow_id[ID of the workflow on the Galaxy instance]' \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--port[Port to serve Galaxy on (default is 9090).]' \
            '--host[Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.]' \
            '--engine[Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.]' \
            '--non_strict_cwl[Disable strict validation of CWL.]' \
            '--docker_galaxy_image[Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.]' \
            '--docker_extra_volume[Extra path to mount if --engine docker.]':file:_files \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--daemon[Serve Galaxy process as a daemon.]' \
            '--pid_file[Location of pid file is executed with --daemon.]':file:_files \
            '--ignore_dependency_problems[When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.]' \
            '--skip_client_build[Do not build Galaxy client when serving Galaxy.]' \
            {--shed_install,--no_shed_install}'[By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_training_init {
        _arguments \
            '--topic_name[Name (directory name) of the topic to create or in which a tutorial should be created or updates \[required\]]' \
            '--topic_title[Title of the topic to create]' \
            '--topic_summary[Summary of the topic]' \
            '--topic_target[Target audience for the topic]' \
            '--tutorial_name[Name (directory name) of the tutorial to create or to modify]' \
            '--tutorial_title[Title of the tutorial]' \
            '--hands_on[Add hands-on for the new tutorial]' \
            '--slides[Add slides for the new tutorial]' \
            '--workflow[Workflow of the tutorial (locally)]':file:_files \
            '--galaxy_url[URL of a Galaxy instance with the workflow]' \
            '--galaxy_api_key[API key on the Galaxy instance with the workflow]' \
            '--workflow_id[ID of the workflow on the Galaxy instance]' \
            '--zenodo_link[Zenodo URL with the input data]' \
            '--datatypes[YAML file with the correspondance between Zenodo extension and Galaxy datatypes]':file:_files \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--port[Port to serve Galaxy on (default is 9090).]' \
            '--host[Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.]' \
            '--engine[Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.]' \
            '--non_strict_cwl[Disable strict validation of CWL.]' \
            '--docker_galaxy_image[Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.]' \
            '--docker_extra_volume[Extra path to mount if --engine docker.]':file:_files \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--daemon[Serve Galaxy process as a daemon.]' \
            '--pid_file[Location of pid file is executed with --daemon.]':file:_files \
            '--ignore_dependency_problems[When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.]' \
            '--skip_client_build[Do not build Galaxy client when serving Galaxy.]' \
            {--shed_install,--no_shed_install}'[By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_upload_data {
        _arguments \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--port[Port to serve Galaxy on (default is 9090).]' \
            '--host[Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.]' \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--tags[Comma-separated list of tags to add to the created history.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_workflow_convert {
        _arguments \
            {-f,--force}'[Overwrite existing files if present.]' \
            {-o,--output,--galaxy_root}'[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--port[Port to serve Galaxy on (default is 9090).]' \
            '--host[Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.]' \
            '--engine[Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.]' \
            '--non_strict_cwl[Disable strict validation of CWL.]' \
            '--docker_galaxy_image[Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.]' \
            '--docker_extra_volume[Extra path to mount if --engine docker.]':file:_files \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--daemon[Serve Galaxy process as a daemon.]' \
            '--pid_file[Location of pid file is executed with --daemon.]':file:_files \
            '--ignore_dependency_problems[When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.]' \
            '--skip_client_build[Do not build Galaxy client when serving Galaxy.]' \
            {--shed_install,--no_shed_install}'[By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_workflow_edit {
        _arguments \
            '--galaxy_root[Root of development galaxy directory to execute command with.]':file:_files \
            '--galaxy_python_version[Python version to start Galaxy under]' \
            '--extra_tools[Extra tool sources to include in Galaxy'\''s tool panel (file or directory). These will not be linted/tested/etc... but they will be available to workflows and for interactive use.]':file:_files \
            '--install_galaxy[Download and configure a disposable copy of Galaxy from github.]' \
            '--galaxy_branch[Branch of Galaxy to target (defaults to master) if a Galaxy root isn'\''t specified.]' \
            '--galaxy_source[Git source of Galaxy to target (defaults to the official galaxyproject github source if a Galaxy root isn'\''t specified.]' \
            '--skip_venv[Do not create or source a virtualenv environment for Galaxy, this should be used to preserve an externally configured virtual environment or conda environment.]' \
            '--no_cache_galaxy[Skip caching of Galaxy source and dependencies obtained with --install_galaxy. Not caching this results in faster downloads (no git) - so is better on throw away instances such with TravisCI.]' \
            '--no_cleanup[Do not cleanup temp files created for and by Galaxy.]' \
            '--galaxy_email[E-mail address to use when launching singleuser Galaxy server.]' \
            {--docker,--no_docker}'[Run Galaxy tools in Docker if enabled.]' \
            '--docker_cmd[Command used to launch docker (defaults to docker).]' \
            {--docker_sudo,--no_docker_sudo}'[Flag to use sudo when running docker.]' \
            '--docker_host[Docker host to target when executing docker commands (defaults to localhost).]' \
            '--docker_sudo_cmd[sudo command to use when --docker_sudo is enabled (defaults to sudo).]' \
            {--mulled_containers,--biocontainers}'[Test tools against mulled containers (forces --docker). Disables conda resolution unless any conda option has been set explicitly.]' \
            '--job_config_file[Job configuration file for Galaxy to target.]':file:_files \
            '--tool_dependency_dir[Tool dependency dir for Galaxy to target.]':file:_files \
            '--port[Port to serve Galaxy on (default is 9090).]' \
            '--host[Host to bind Galaxy to. Default is 127.0.0.1 that is restricted to localhost connections for security reasons set to 0.0.0.0 to bind Galaxy to all ports including potentially publicly accessible ones.]' \
            '--engine[Select an engine to serve artifacts such as tools and workflows. Defaults to a local Galaxy, but running Galaxy within a Docker container.]' \
            '--non_strict_cwl[Disable strict validation of CWL.]' \
            '--docker_galaxy_image[Docker image identifier for docker-galaxyflavor used if engine type is specified as ``docker-galaxy``. Defaults to quay.io/bgruening/galaxy.]' \
            '--docker_extra_volume[Extra path to mount if --engine docker.]':file:_files \
            '--test_data[test-data directory to for specified tool(s).]':file:_files \
            '--tool_data_table[tool_data_table_conf.xml file to for specified tool(s).]':file:_files \
            '--dependency_resolvers_config_file[Dependency resolver configuration for Galaxy to target.]':file:_files \
            '--brew_dependency_resolution[Configure Galaxy to use plain brew dependency resolution.]' \
            '--shed_dependency_resolution[Configure Galaxy to use brewed Tool Shed dependency resolution.]' \
            '--no_dependency_resolution[Configure Galaxy with no dependency resolvers.]' \
            '--conda_prefix[Conda prefix to use for conda dependency commands.]':file:_files \
            '--conda_exec[Location of conda executable.]':file:_files \
            {--conda_channels,--conda_ensure_channels}'[Ensure conda is configured with specified comma separated list of channels.]' \
            '--conda_use_local[Use locally built packages while building Conda environments.]' \
            '--conda_dependency_resolution[Configure Galaxy to use only conda for dependency resolution.]' \
            {--conda_auto_install,--no_conda_auto_install}'[Conda dependency resolution for Galaxy will attempt to install requested but missing packages.]' \
            {--conda_auto_init,--no_conda_auto_init}'[Conda dependency resolution for Galaxy will auto install conda itself using miniconda if not availabe on conda_prefix.]' \
            {--simultaneous_uploads,--no_simultaneous_uploads}'[When uploading files to Galaxy for tool or workflow tests or runs, upload multiple files simultaneously without waiting for the previous file upload to complete.]' \
            {--check_uploads_ok,--no_check_uploads_ok}'[When uploading files to Galaxy for tool or workflow tests or runs, check that the history is in an '\''ok'\'' state before beginning tool or workflow execution.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--postgres[Use postgres database type.]' \
            '--database_type[Type of database to use for profile - '\''auto'\'', '\''sqlite'\'', '\''postgres'\'', and '\''postgres_docker'\'' are available options. Use postgres to use an existing postgres server you user can access without a password via the psql command. Use postgres_docker to have Planemo manage a docker container running postgres. Data with postgres_docker is not yet persisted past when you restart the docker container launched by Planemo so be careful with this option.]' \
            '--postgres_psql_path[Name or or path to postgres client binary (psql).]' \
            '--postgres_database_user[Postgres username for managed development databases.]' \
            '--postgres_database_host[Postgres host name for managed development databases.]' \
            '--postgres_database_port[Postgres port for managed development databases.]' \
            '--file_path[Location for files created by Galaxy (e.g. database/files).]':file:_files \
            '--database_connection[Database connection string to use for Galaxy.]' \
            '--shed_tool_conf[Location of shed tools conf file for Galaxy.]' \
            '--shed_tool_path[Location of shed tools directory for Galaxy.]' \
            {--galaxy_single_user,--no_galaxy_single_user}'[By default Planemo will configure Galaxy to run in single-user mode where there is just one user and this user is automatically logged it. Use --no_galaxy_single_user to prevent Galaxy from running this way.]' \
            '--daemon[Serve Galaxy process as a daemon.]' \
            '--pid_file[Location of pid file is executed with --daemon.]':file:_files \
            '--ignore_dependency_problems[When installing shed repositories for workflows, ignore dependency issues. These likely indicate a problem but in some cases may not prevent a workflow from successfully executing.]' \
            '--skip_client_build[Do not build Galaxy client when serving Galaxy.]' \
            {--shed_install,--no_shed_install}'[By default Planemo will attempt to install repositories needed for workflow testing. This may not be appropriate for production servers and so this can disabled by calling planemo with --no_shed_install.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_workflow_job_init {
        _arguments \
            {-f,--force}'[Overwrite existing files if present.]' \
            {-o,--output,--galaxy_url}'[Remote Galaxy URL to use with external Galaxy engine.]':file:_files \
            '--galaxy_user_key[User key to use with external Galaxy engine.]' \
            {--from_invocation,--from_uri}'[Build a workflow test or job description from an invocation ID run on an external Galaxy.A Galaxy URL and API key must also be specified. This allows test data to be downloadedand inputs and parameters defined automatically. Alternatively, the default is to build thedescriptions from a provided workflow URI.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_workflow_lint {
        _arguments \
            {--report_level,--report_xunit}'[Output an XUnit report, useful for CI testing]' \
            {--fail_level,-s,--skip}'[Comma-separated list of lint tests to skip (e.g. passing --skip '\''citations,xml_order'\'' would skip linting of citations and bestpractice XML ordering.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_workflow_test_init {
        _arguments \
            {-f,--force}'[Overwrite existing files if present.]' \
            {-o,--output,--split_test,--no_split_test}'[Write workflow job and test definitions to separate files.]':file:_files \
            '--galaxy_url[Remote Galaxy URL to use with external Galaxy engine.]' \
            '--galaxy_user_key[User key to use with external Galaxy engine.]' \
            {--from_invocation,--from_uri}'[Build a workflow test or job description from an invocation ID run on an external Galaxy.A Galaxy URL and API key must also be specified. This allows test data to be downloadedand inputs and parameters defined automatically. Alternatively, the default is to build thedescriptions from a provided workflow URI.]' \
            '--profile[Name of profile (created with the profile_create command) to use with this command.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }

    function _planemo_workflow_upload {
        _arguments \
            '--namespace[Organization or username under which to create or update workflow repository. Must be a valid github username or organization]' \
            '--dry_run[Don'\''t execute action, show preview of action.]' \
            '--help[Show this message and exit.]' \
            "*: :_files"

    }


function _planemo {
    local line state

    function _commands {
        local -a commands
        commands=(
            'autoupdate:Auto-update tool requirements by checking...'
            'ci_find_repos:Find all shed repositories in one or more...'
            'ci_find_tools:Find all tools in one or more directories.'
            'clone:Short-cut to quickly clone, fork, and...'
            'conda_build:Perform conda build with Planemo'\''s conda.'
            'conda_env:Activate a conda environment for tool.'
            'conda_init:Download and install conda.'
            'conda_install:Install conda packages for tool requirements.'
            'conda_lint:Check conda recipe for common issues.'
            'conda_search:Perform conda search with Planemo'\''s conda.'
            'config_init:Initialise global configuration for Planemo.'
            'container_register:Register multi-requirement containers as...'
            'create_alias:Add an alias for a path or a workflow or...'
            'create_gist:Upload file to GitHub as a sharable gist.'
            'database_create:Create a *development* database.'
            'database_delete:Delete a *development* database.'
            'database_list:List databases in configured database source.'
            'delete_alias:List aliases for a path or a workflow or...'
            'docker_build:Build (and optionally cache) Docker images.'
            'docker_shell:Launch shell in Docker container for a tool.'
            'dockstore_init:Initialize a .dockstore.yml configuration...'
            'docs:Open Planemo documentation in web browser.'
            'lint:Check for common errors and best practices.'
            'list_alias:List aliases for a path or a workflow or...'
            'list_invocations:Get a list of invocations for a particular...'
            'list_repos:Find all shed repositories in one or more...'
            'merge_test_reports:Merge tool_test_output.json files from...'
            'mull:Build containers for specified tools.'
            'mulled_init:Download and install involucro for mull...'
            'normalize:Generate normalized tool XML from input.'
            'open:Open latest Planemo test results in a web...'
            'profile_create:Create a profile.'
            'profile_delete:Delete a profile.'
            'profile_list:List configured profile names.'
            'project_init:(Experimental) Initialize a new tool project.'
            'pull_request:Short-cut to quickly create a pull request...'
            'rerun:Planemo command for rerunning and remapping...'
            'run:Planemo command for running tools and jobs.'
            'serve:Launch Galaxy instance with specified tools.'
            'share_test:Publish JSON test results as sharable Gist.'
            'shed_build:Create a Galaxy tool tarball.'
            'shed_create:Create a repository in a Galaxy Tool Shed.'
            'shed_diff:diff between local repository and Tool Shed.'
            'shed_download:Download tool from Tool Shed into directory.'
            'shed_init:Bootstrap new Tool Shed .shed.yml file.'
            'shed_lint:Check Tool Shed repository for common issues.'
            'shed_serve:Launch Galaxy with Tool Shed dependencies.'
            'shed_test:Run tests of published shed artifacts.'
            'shed_update:Update Tool Shed repository.'
            'shed_upload:Low-level command to upload tarballs.'
            'syntax:Open tool config syntax page in web browser.'
            'test:Run specified tool'\''s tests within Galaxy.'
            'test_reports:Generate human readable tool test reports.'
            'tool_init:Generate tool outline from given arguments.'
            'training_fill_data_library:Build training template from workflow.'
            'training_generate_from_wf:Create tutorial skeleton from workflow.'
            'training_init:Build training template from workflow.'
            'upload_data:Planemo command for uploading data to an...'
            'workflow_convert:Convert Format 2 workflows to native Galaxy...'
            'workflow_edit:Open a synchronized Galaxy workflow editor.'
            'workflow_job_init:Initialize a Galaxy workflow job...'
            'workflow_lint:Check workflows for syntax errors and best...'
            'workflow_test_init:Initialize a Galaxy workflow test...'
            'workflow_upload:Upload workflows to github organization.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--version[Show the version and exit.]' \
        {-v,--verbose}'[Enables verbose mode.]' \
        '--config[Planemo configuration YAML file.]' \
        '--directory[Workspace for planemo.]' \
        '--help[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (autoupdate)
            _planemo_autoupdate
            ;;

        (ci_find_repos)
            _planemo_ci_find_repos
            ;;

        (ci_find_tools)
            _planemo_ci_find_tools
            ;;

        (clone)
            _planemo_clone
            ;;

        (conda_build)
            _planemo_conda_build
            ;;

        (conda_env)
            _planemo_conda_env
            ;;

        (conda_init)
            _planemo_conda_init
            ;;

        (conda_install)
            _planemo_conda_install
            ;;

        (conda_lint)
            _planemo_conda_lint
            ;;

        (conda_search)
            _planemo_conda_search
            ;;

        (config_init)
            _planemo_config_init
            ;;

        (container_register)
            _planemo_container_register
            ;;

        (create_alias)
            _planemo_create_alias
            ;;

        (create_gist)
            _planemo_create_gist
            ;;

        (database_create)
            _planemo_database_create
            ;;

        (database_delete)
            _planemo_database_delete
            ;;

        (database_list)
            _planemo_database_list
            ;;

        (delete_alias)
            _planemo_delete_alias
            ;;

        (docker_build)
            _planemo_docker_build
            ;;

        (docker_shell)
            _planemo_docker_shell
            ;;

        (dockstore_init)
            _planemo_dockstore_init
            ;;

        (docs)
            _planemo_docs
            ;;

        (lint)
            _planemo_lint
            ;;

        (list_alias)
            _planemo_list_alias
            ;;

        (list_invocations)
            _planemo_list_invocations
            ;;

        (list_repos)
            _planemo_list_repos
            ;;

        (merge_test_reports)
            _planemo_merge_test_reports
            ;;

        (mull)
            _planemo_mull
            ;;

        (mulled_init)
            _planemo_mulled_init
            ;;

        (normalize)
            _planemo_normalize
            ;;

        (open)
            _planemo_open
            ;;

        (profile_create)
            _planemo_profile_create
            ;;

        (profile_delete)
            _planemo_profile_delete
            ;;

        (profile_list)
            _planemo_profile_list
            ;;

        (project_init)
            _planemo_project_init
            ;;

        (pull_request)
            _planemo_pull_request
            ;;

        (rerun)
            _planemo_rerun
            ;;

        (run)
            _planemo_run
            ;;

        (serve)
            _planemo_serve
            ;;

        (share_test)
            _planemo_share_test
            ;;

        (shed_build)
            _planemo_shed_build
            ;;

        (shed_create)
            _planemo_shed_create
            ;;

        (shed_diff)
            _planemo_shed_diff
            ;;

        (shed_download)
            _planemo_shed_download
            ;;

        (shed_init)
            _planemo_shed_init
            ;;

        (shed_lint)
            _planemo_shed_lint
            ;;

        (shed_serve)
            _planemo_shed_serve
            ;;

        (shed_test)
            _planemo_shed_test
            ;;

        (shed_update)
            _planemo_shed_update
            ;;

        (shed_upload)
            _planemo_shed_upload
            ;;

        (syntax)
            _planemo_syntax
            ;;

        (test)
            _planemo_test
            ;;

        (test_reports)
            _planemo_test_reports
            ;;

        (tool_init)
            _planemo_tool_init
            ;;

        (training_fill_data_library)
            _planemo_training_fill_data_library
            ;;

        (training_generate_from_wf)
            _planemo_training_generate_from_wf
            ;;

        (training_init)
            _planemo_training_init
            ;;

        (upload_data)
            _planemo_upload_data
            ;;

        (workflow_convert)
            _planemo_workflow_convert
            ;;

        (workflow_edit)
            _planemo_workflow_edit
            ;;

        (workflow_job_init)
            _planemo_workflow_job_init
            ;;

        (workflow_lint)
            _planemo_workflow_lint
            ;;

        (workflow_test_init)
            _planemo_workflow_test_init
            ;;

        (workflow_upload)
            _planemo_workflow_upload
            ;;

        esac
        ;;
     esac

}

