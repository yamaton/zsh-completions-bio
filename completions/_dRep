#compdef _dRep dRep

# Auto-generated with h2o

    function _dRep_compare {
        _arguments \
            {-p,--processors}'[threads (default: 6)]' \
            {-d,--debug}'[make extra debugging output (default: False)]' \
            {-h,--help}'[show this help message and exit]' \
            {-g,--genomes}'[genomes to filter in .fasta format. Not necessary if Bdb or Wdb already exist. Can also input a text file with paths to genomes, which results in fewer OS issues than wildcard expansion (default: None)]' \
            '--S_algorithm[Algorithm for secondary clustering comaprisons: fastANI = Kmer-based approach; very fast ANImf = (DEFAULT) Align whole genomes with nucmer; filter alignment; compare aligned regions ANIn = Align whole genomes with nucmer; compare aligned regions gANI = Identify and align ORFs; compare aligned ORFS goANI = Open source version of gANI; requires nsmimscan]' \
            {-ms,--MASH_sketch}'[MASH sketch size (default: 1000)]' \
            '--SkipMash[Skip MASH clustering, just do secondary clustering on all genomes (default: False)]' \
            '--SkipSecondary[Skip secondary clustering, just perform MASH clustering (default: False)]' \
            '--n_PRESET[Presets to pass to nucmer tight = only align highly conserved regions normal = default ANIn parameters (default: normal)]' \
            {-pa,--P_ani}'[ANI threshold to form primary (MASH) clusters (default: 0.9)]' \
            {-sa,--S_ani}'[ANI threshold to form secondary clusters (default: 0.95)]' \
            {-nc,--cov_thresh}'[Minmum level of overlap between genomes when doing secondary comparisons (default: 0.1)]' \
            {-cm,--coverage_method}'[Method to calculate coverage of an alignment (for ANIn/ANImf only; gANI and fastANI can only do larger method) total = 2*(aligned length) / (sum of total genome lengths) larger = max((aligned length / genome 1), (aligned_length / genome2))]' \
            '--clusterAlg[Algorithm used to cluster genomes (passed to scipy.cluster.hierarchy.linkage (default: average)]' \
            '--multiround_primary_clustering[Cluster each primary clunk separately and merge at the end with single linkage. Decreases RAM usage and increases speed, and the cost of a minor loss in precision and the inability to plot primary_clustering_dendrograms. Especially helpful when clustering 5000+ genomes. Will be done with single linkage clustering (default: False)]' \
            '--primary_chunksize[Impacts multiround_primary_clustering. If you have more than this many genomes, process them in chunks of this size. (default: 5000)]' \
            '--greedy_secondary_clustering[Use a heuristic to avoid pair-wise comparisons when doing secondary clustering. Will be done with single linkage clustering. Only works for fastANI S_algorithm option at the moment (default: False)]' \
            '--run_tertiary_clustering[Run an additional round of clustering on the final genome set. This is especially useful when greedy clustering is performed and/or to handle cases where similar genomes end up in different primary clusters. Only works with dereplicate, not compare. (default: False)]' \
            '--gen_warnings[Generate warnings (default: False)]' \
            '--warn_dist[How far from the threshold to throw cluster warnings (default: 0.25)]' \
            '--warn_sim[Similarity threshold for warnings between dereplicated genomes (default: 0.98)]' \
            '--warn_aln[Minimum aligned fraction for warnings between dereplicated genomes (ANIn) (default: 0.25)]' \
            "*: :_files"

    }

    function _dRep_dereplicate {
        _arguments \
            {-p,--processors}'[threads (default: 6)]' \
            {-d,--debug}'[make extra debugging output (default: False)]' \
            {-h,--help}'[show this help message and exit]' \
            {-g,--genomes}'[genomes to filter in .fasta format. Not necessary if Bdb or Wdb already exist. Can also input a text file with paths to genomes, which results in fewer OS issues than wildcard expansion (default: None)]' \
            {-l,--length}'[Minimum genome length (default: 50000)]' \
            {-comp,--completeness}'[Minimum genome completeness (default: 75)]' \
            {-con,--contamination}'[Maximum genome contamination (default: 25)]' \
            '--ignoreGenomeQuality[Don'\''t run checkM or do any quality filtering. NOT RECOMMENDED! This is useful for use with bacteriophages or eukaryotes or things where checkM scoring does not work. Will only choose genomes based on length and N50 (default: False)]' \
            '--genomeInfo[location of .csv file containing quality information on the genomes. Must contain: \["genome"(basename of .fasta file of that genome), "completeness"(0-100 value for completeness of the genome), "contamination"(0-100 value of the contamination of the genome)\] (default: None)]' \
            '--checkM_method[Either lineage_wf (more accurate) or taxonomy_wf (faster) (default: lineage_wf)]' \
            '--set_recursion[Increases the python recursion limit. NOT RECOMMENDED unless checkM is crashing due to recursion issues. Recommended to set to 2000 if needed, but setting this could crash python (default: 0)]' \
            '--checkm_group_size[The number of genomes passed to checkM at a time. Increasing this increases RAM but makes checkM faster (default: 2000)]' \
            '--S_algorithm[Algorithm for secondary clustering comaprisons: fastANI = Kmer-based approach; very fast ANImf = (DEFAULT) Align whole genomes with nucmer; filter alignment; compare aligned regions ANIn = Align whole genomes with nucmer; compare aligned regions gANI = Identify and align ORFs; compare aligned ORFS goANI = Open source version of gANI; requires nsmimscan]' \
            {-ms,--MASH_sketch}'[MASH sketch size (default: 1000)]' \
            '--SkipMash[Skip MASH clustering, just do secondary clustering on all genomes (default: False)]' \
            '--SkipSecondary[Skip secondary clustering, just perform MASH clustering (default: False)]' \
            '--n_PRESET[Presets to pass to nucmer tight = only align highly conserved regions normal = default ANIn parameters (default: normal)]' \
            {-pa,--P_ani}'[ANI threshold to form primary (MASH) clusters (default: 0.9)]' \
            {-sa,--S_ani}'[ANI threshold to form secondary clusters (default: 0.95)]' \
            {-nc,--cov_thresh}'[Minmum level of overlap between genomes when doing secondary comparisons (default: 0.1)]' \
            {-cm,--coverage_method}'[Method to calculate coverage of an alignment (for ANIn/ANImf only; gANI and fastANI can only do larger method) total = 2*(aligned length) / (sum of total genome lengths) larger = max((aligned length / genome 1), (aligned_length / genome2))]' \
            '--clusterAlg[Algorithm used to cluster genomes (passed to scipy.cluster.hierarchy.linkage (default: average)]' \
            '--multiround_primary_clustering[Cluster each primary clunk separately and merge at the end with single linkage. Decreases RAM usage and increases speed, and the cost of a minor loss in precision and the inability to plot primary_clustering_dendrograms. Especially helpful when clustering 5000+ genomes. Will be done with single linkage clustering (default: False)]' \
            '--primary_chunksize[Impacts multiround_primary_clustering. If you have more than this many genomes, process them in chunks of this size. (default: 5000)]' \
            '--greedy_secondary_clustering[Use a heuristic to avoid pair-wise comparisons when doing secondary clustering. Will be done with single linkage clustering. Only works for fastANI S_algorithm option at the moment (default: False)]' \
            '--run_tertiary_clustering[Run an additional round of clustering on the final genome set. This is especially useful when greedy clustering is performed and/or to handle cases where similar genomes end up in different primary clusters. Only works with dereplicate, not compare. (default: False)]' \
            {-comW,--completeness_weight}'[completeness weight (default: 1)]' \
            {-conW,--contamination_weight}'[contamination weight (default: 5)]' \
            {-strW,--strain_heterogeneity_weight}'[strain heterogeneity weight (default: 1)]' \
            {-N50W,--N50_weight}'[weight of log(genome N50) (default: 0.5)]' \
            {-sizeW,--size_weight}'[weight of log(genome size) (default: 0)]' \
            {-centW,--centrality_weight}'[Weight of (centrality - S_ani) (default: 1)]' \
            {-extraW,--extra_weight_table}'[Path to a tab-separated file with two-columns, no headers, listing genome and extra score to apply to that genome (default: None)]' \
            '--gen_warnings[Generate warnings (default: False)]' \
            '--warn_dist[How far from the threshold to throw cluster warnings (default: 0.25)]' \
            '--warn_sim[Similarity threshold for warnings between dereplicated genomes (default: 0.98)]' \
            '--warn_aln[Minimum aligned fraction for warnings between dereplicated genomes (ANIn) (default: 0.25)]' \
            '--skip_plots[Dont make plots (default: False)]' \
            "*: :_files"

    }

    function _dRep_check_dependencies {
        _arguments \
            {-h,--help}'[show this help message and exit]' \
            "*: :_files"

    }


function _dRep {
    local line state

    function _commands {
        local -a commands
        commands=(
            'compare:Compare and cluster a set of genomes'
            'dereplicate:De-replicate a set of genomes'
            'check_dependencies:Check which dependencies are properly installed'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (compare)
            _dRep_compare
            ;;

        (dereplicate)
            _dRep_dereplicate
            ;;

        (check_dependencies)
            _dRep_check_dependencies
            ;;

        esac
        ;;
     esac

}

