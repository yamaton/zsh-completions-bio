#compdef _kmcp kmcp

# Auto-generated with h2o

    function _kmcp_autocompletion {
        _arguments \
            '--file[autocompletion file (default "~/.bash_completion.d/kmcp.sh")]' \
            {-h,--help}'[help for autocompletion]' \
            '--shell[autocompletion type (bash|zsh|fish|powershell) (default "bash")]' \
            {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
            '--log[Log file.]' \
            {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
            {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
            "*: :_files"

    }

    function _kmcp_compute {
        _arguments \
            '--by-seq[Compute k-mers (sketches) for each sequence, instead of the whole file.]' \
            '--circular[Input sequences are circular.]' \
            {-c,--compress}'[Output gzipped .unik files, it'\''s slower and can save little space.]' \
            {-r,--file-regexp}'[Regular expression for matching sequence files in -I/--in-dir, case ignored. (default "\\.(f\[aq\](st\[aq\])?|fna)(.gz)?$")]' \
            '--force[Overwrite existed output directory.]' \
            {-h,--help}'[help for compute]' \
            {-I,--in-dir}'[Directory containing FASTA/Q files. Directory symlinks are followed.]' \
            {-k,--kmer}'[K-mer size(s). (default \[21\])]' \
            {-W,--minimizer-w}'[Minimizer window size.]' \
            {-O,--out-dir}'[Output directory.]' \
            {-N,--ref-name-regexp}'[Regular expression (must contains "(" and ")") for extracting reference name from filename. (default "(?i)(.+)\\.(f\[aq\](st\[aq\])?|fna)(.gz)?$")]' \
            {-D,--scale}'[Scale of the FracMinHash (Scaled MinHash), or down-sample factor for Syncmers and Minimizer. (default 1)]' \
            {-B,--seq-name-filter}'[List of regular expressions for filtering out sequences by header/name, case ignored.]' \
            {-m,--split-min-ref}'[Only splitting sequences >= X bp. (default 1000)]' \
            {-n,--split-number}'[Chunk number for splitting sequences, incompatible with -s/--split-size.]' \
            {-l,--split-overlap}'[Chunk overlap for splitting sequences. The default value will be set to k-1 unless you change it.]' \
            {-s,--split-size}'[Chunk size for splitting sequences, incompatible with -n/--split-number.]' \
            {-S,--syncmer-s}'[Length of the s-mer in Closed Syncmers.]' \
            {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
            '--log[Log file.]' \
            {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
            {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
            "*: :_files"

    }

    function _kmcp_index {
        _arguments \
            {-a,--alias}'[Database alias/name. (default: basename of --out-dir). You can also manually edit it in info file: ${outdir}/__db.yml.]' \
            {-b,--block-size}'[Block size, better be multiple of 64 for large number of input files. (default: min(#.files/#theads, 8))]' \
            {-1,--block-size1-kmers-t}'[If k-mers of single .unik file exceeds this threshold, an individual index is created for this file. Supported units: K, M, G. (default "200M")]' \
            {-8,--block-size8-kmers-t}'[If k-mers of single .unik file exceeds this threshold, block size is changed to 8. Supported units: K, M, G. (default "20M")]' \
            {-X,--block-sizeX}'[If k-mers of single .unik file exceeds --block-sizeX-kmers-t, block size is changed to this value. (default 256)]' \
            {-x,--block-sizeX-kmers-t}'[If k-mers of single .unik file exceeds this threshold, block size is changed to --block-sizeX. Supported units: K, M, G. (default "10M")]' \
            '--dry-run[Dry run, useful for adjusting parameters (highly recommended).]' \
            {-f,--false-positive-rate}'[False positive rate of the bloom filters, range: (0, 1). (default 0.3)]' \
            '--file-regexp[Regular expression for matching files in -I/--in-dir, case ignored. (default ".unik$")]' \
            '--force[Overwrite existed output directory.]' \
            {-h,--help}'[help for index]' \
            {-I,--in-dir}'[Directory containing .unik files. Directory symlinks are followed.]' \
            {-F,--max-open-files}'[Maximum number of opened files, please use a small value for hard disk drive storage. (default 256)]' \
            {-n,--num-hash}'[Number of hash functions in bloom filters. (default 1)]' \
            {-O,--out-dir}'[Output directory. (default: ${indir}.kmcp-db)]' \
            {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
            '--log[Log file.]' \
            {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
            {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
            "*: :_files"

    }

    function _kmcp_merge {
        _arguments \
            {-n,--field-hits}'[Field of hits. (default 5)]' \
            {-f,--field-queryIdx}'[Field of queryIdx. (default 15)]' \
            {-h,--help}'[help for merge]' \
            {-H,--no-header-row}'[Do not print header row.]' \
            {-o,--out-file}'[Out file, supports and recommends a ".gz" suffix ("-" for stdout). (default "-")]' \
            {-s,--sort-by}'[Sort hits by "qcov", "tcov" or "jacc" (Jaccard Index). (default "qcov")]' \
            {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
            '--log[Log file.]' \
            {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
            {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
            "*: :_files"

    }

    function _kmcp_profile {
        _arguments \
            {-r,--min-chunks-reads}'[1 5 10 50 100 100]' \
            {-p,--min-chunks-fraction}'[0.2 0.6 0.7 0.8 1 1]' \
            {-d,--max-chunks-depth-stdev}'[10 2 2 2 2 1.5]' \
            {-u,--min-uniq-reads}'[1 2 5 20 50 50]' \
            {-U,--min-hic-ureads}'[1 1 2 5 10 10]' \
            {-H,--min-hic-ureads-qcov}'[0.7 0.7 0.7 0.75 0.8 0.8]' \
            {-P,--min-hic-ureads-prop}'[0.01 0.1 0.2 0.1 0.1 0.15]' \
            '-[taxonkit profile2cami: convert any metagenomic profile table with TaxIds to CAMI format. Use this if you forget to output CAMI format.]' \
            '-[taxonkit cami-filter: remove taxa of given TaxIds and their descendants in a CAMI metagenomic profile.]' \
            {-C,-s}'[2. For pathogen detection (you may create databases with lower FPRs,]':file:_files \
            {-I,--abund-max-iters}'[Miximal iteration of abundance estimation. (default 10)]' \
            '--abund-pct-threshold[If the percentage change of the predominant target is smaller than this threshold, stop the iteration. (default 0.01)]' \
            {-B,--binning-result}'[Save extra binning result in CAMI report.]' \
            {-C,--cami-report}'[Save extra CAMI-like report.]' \
            '--debug[Debug output file.]' \
            {-F,--filter-low-pct}'[Filter out predictions with the smallest relative abundances summing up X%. Range: \[0,100).]' \
            {-h,--help}'[help for profile]' \
            '--keep-main-matches[Only keep main matches, abandon matches with sharply decreased qcov (> --max-qcov-gap).]' \
            '--keep-perfect-matches[Only keep the perfect matches (qcov == 1) if there are.]' \
            {-n,--keep-top-qcovs}'[Keep matches with the top N qcovs for a query, 0 for all.]' \
            '--level[Level to estimate abundance at. Available values: species, strain/assembly. (default "species")]' \
            '--line-chunk-size[Number of lines to process for each thread, and 4 threads is fast enough. Type "kmcp profile -h" for details. (default 5000)]' \
            {-d,--max-chunks-depth-stdev}'[Maximum standard deviation of relative depths of all chunks. (default 2)]' \
            {-f,--max-fpr}'[Maximum false positive rate of a read in search result. (default 0.01)]' \
            {-R,--max-mismatch-err}'[Maximum error rate of a read being matched to a wrong reference, for determing the right reference for ambiguous reads. Range: (0, 1). (default 0.05)]' \
            '--max-qcov-gap[Max qcov gap between adjacent matches. (default 0.4)]' \
            {-M,--metaphlan-report}'[Save extra metaphlan-like report.]' \
            '--metaphlan-report-version[Metaphlan report version (2 or 3) (default "3")]' \
            {-p,--min-chunks-fraction}'[Minimum fraction of matched reference chunks with reads >= -r/--min-chunks-reads. (default 0.8)]' \
            {-r,--min-chunks-reads}'[Minimum number of reads for a reference chunk. (default 50)]' \
            {-D,--min-dreads-prop}'[Minimum proportion of distinct reads, for determing the right reference for ambiguous reads. Range: (0, 1). (default 0.05)]' \
            {-U,--min-hic-ureads}'[Minimum number of high-confidence uniquely matched reads for a reference. (default 5)]' \
            {-P,--min-hic-ureads-prop}'[Minimum proportion of high-confidence uniquely matched reads. (default 0.1)]' \
            {-H,--min-hic-ureads-qcov}'[Minimum query coverage of high-confidence uniquely matched reads. (default 0.75)]' \
            {-t,--min-query-cov}'[Minimum query coverage of a read in search result. (default 0.55)]' \
            {-u,--min-uniq-reads}'[Minimum number of uniquely matched reads for a reference. (default 20)]' \
            {-m,--mode}'[Profiling mode, type "kmcp profile -h" for details. available values: 0 (for pathogen detection), 1 (higherrecall), 2 (high recall), 3 (default), 4 (high precision), 5 (higher precision). (default 3)]' \
            {-N,--name-map}'[Tabular two-column file(s) mapping reference IDs to reference names.]' \
            '--no-amb-corr[Do not correct ambiguous reads. Use this flag to reduce analysis time if the stage 1/4 produces thousands of candidates.]' \
            '--norm-abund[Method for normalize abundance of a reference by the mean/min/max abundance in all chunks, available values: mean, min, max. (default "mean")]' \
            {-o,--out-prefix}'[Out file prefix ("-" for stdout). (default "-")]' \
            '--rank-prefix[Prefixes of taxon name in certain ranks, used with --metaphlan-report. (default \[k__,p__,c__,o__,f__,g__,s__,t__\])]' \
            {-s,--sample-id}'[Sample ID in result file.]' \
            {-S,--separator}'[Separator of TaxIds and taxonomy names. (default ";")]' \
            '--show-rank[Only show TaxIds and names of these ranks. (default \[superkingdom,phylum,class,order,family,genus,species,strain\])]' \
            {-X,--taxdump}'[Directory of NCBI taxonomy dump files: names.dmp, nodes.dmp, optional with merged.dmp and delnodes.dmp.]' \
            {-T,--taxid-map}'[Tabular two-column file(s) mapping reference IDs to TaxIds.]' \
            '--taxonomy-id[Taxonomy ID in result file.]' \
            {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
            '--log[Log file.]' \
            {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
            {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
            "*: :_files"

    }

    function _kmcp_search {
        _arguments \
            '-[Faster startup speed when index files are buffered in memory.]' \
            '-[Multiple KMCP processes can share the memory.]' \
            '-[It'\''s slightly faster due to the use of physically contiguous memory. The speedup is more significant for smaller databases.]' \
            '-[Do not load all index files into memory nor use mmap, using file seeking.]' \
            '-[It'\''s much slower, >4X slower on SSD and would be much slower on HDD disks.]' \
            {-1,-2}'[3. In computer clusters, where databases are saved in NAS storages.]' \
            '-1[3. In computer clusters, where databases are saved in NAS storages.]' \
            {-d,--db-dir}'[Database directory created by "kmcp index". Please add -w/--load-whole-db for databases on network-attached storages (NAS), e.g., a computer cluster environment.]' \
            {-D,--default-name-map}'[Load ${db}/__name_mapping.tsv for mapping name first.]' \
            {-S,--do-not-sort}'[Do not sort matches of a query.]' \
            {-h,--help}'[help for search]' \
            {-n,--keep-top-scores}'[Keep matches with the top N scores for a query, 0 for all.]' \
            {-K,--keep-unmatched}'[Keep unmatched query sequence information.]' \
            {-u,--kmer-dedup-threshold}'[Remove duplicated kmers for a query with >= X k-mers. (default 256)]' \
            {-w,--load-whole-db}'[Load all index files into memory, it'\''s faster for small databases but needs more memory. Use this for databases on network-attached storages (NAS). Please read "Index files loading modes" in "kmcp search -h".]' \
            '--low-mem[Do not load all index files into memory nor use mmap, the searching would be very very slow for a large number of queries. Please read "Index files loading modes" in "kmcp search -h".]' \
            {-f,--max-fpr}'[Maximum false positive rate of a query. (default 0.01)]' \
            {-c,--min-kmers}'[Minimum number of matched k-mers (sketches). (default 10)]' \
            {-t,--min-query-cov}'[Minimum query coverage, i.e., proportion of matched k-mers and unique k-mers of a query. (default 0.55)]' \
            {-m,--min-query-len}'[Minimum query length. (default 30)]' \
            {-T,--min-target-cov}'[Minimum target coverage, i.e., proportion of matched k-mers and unique k-mers of a target.]' \
            {-N,--name-map}'[Tabular two-column file(s) mapping reference IDs to user-defined values. Don'\''t use this if you will use the result for metagenomic profiling which needs the original reference IDs.]' \
            {-H,--no-header-row}'[Do not print header row.]' \
            {-o,--out-file}'[Out file, supports and recommends a ".gz" suffix ("-" for stdout). (default "-")]' \
            '--query-id[Custom query Id when using the whole file as a query.]' \
            {-g,--query-whole-file}'[Use the whole file as a query, e.g., for genome similarity estimation against k-mer sketch database.]' \
            {-1,--read1}'[(Gzipped) read1 file.]' \
            {-2,--read2}'[(Gzipped) read2 file.]' \
            {-s,--sort-by}'[Sort hits by "qcov", "tcov" or "jacc" (Jaccard Index). (default "qcov")]' \
            '--try-se[If paired-end reads have no hits, re-search with read1, if still fails, try read2.]' \
            {-G,--use-filename}'[Use file name as query ID when using the whole file as a query.]' \
            {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
            '--log[Log file.]' \
            {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
            {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
            "*: :_files"

    }

    function _kmcp_utils {
        _arguments \
            {-h,--help}'[help for utils]' \
            {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
            '--log[Log file.]' \
            {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
            {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
            "*: :_files"

    }

    function _kmcp_version {
        _arguments \
            {-u,--check-update}'[check update]' \
            {-h,--help}'[help for version]' \
            {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
            '--log[Log file.]' \
            {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
            {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
            "*: :_files"

    }


function _kmcp {
    local line state

    function _commands {
        local -a commands
        commands=(
            'autocompletion:Generate shell autocompletion script'
            'compute:Generate k-mers (sketches) from FASTA/Q sequences'
            'index:Construct database from k-mer files'
            'merge:Merge search results from multiple databases'
            'profile:Generate taxonomic profile from search results'
            'search:Search sequences against a database'
            'utils:Some utilities'
            'version:Print version information and check for update'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for kmcp]' \
        {-i,--infile-list}'[File of input files list (one file per line). If given, they are appended to files from CLI arguments.]' \
        '--log[Log file.]' \
        {-q,--quiet}'[Do not print any verbose information. But you can write them to file with --log.]' \
        {-j,--threads}'[Number of CPUs cores to use. (default 8)]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (autocompletion)
            _kmcp_autocompletion
            ;;

        (compute)
            _kmcp_compute
            ;;

        (index)
            _kmcp_index
            ;;

        (merge)
            _kmcp_merge
            ;;

        (profile)
            _kmcp_profile
            ;;

        (search)
            _kmcp_search
            ;;

        (utils)
            _kmcp_utils
            ;;

        (version)
            _kmcp_version
            ;;

        esac
        ;;
     esac

}

